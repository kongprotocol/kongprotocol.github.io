{"version":3,"sources":["Components/OpenLoan/OpenLoanButton.tsx","utils/constants.ts","Components/CloseLoan/CloseLoan.tsx","Components/LoanList/LoanList.tsx","redux/modules/app.ts","Components/Arbitrage/Arbitrage.tsx","Components/Arbitrage/ArbBananasEstimate.tsx","Components/LoanAmountEstimate/LoanAmountEstimate.tsx","Components/Arbitrage/ArbKongEstimate.tsx","redux/modules/loans.ts","utils/helpers.ts","redux/helpers.ts","Components/Wallet/Wallet.tsx","Components/NavBar/NavBar.tsx","Components/MainBox/Tabs.tsx","Components/MainBox/MainBox.tsx","Components/OraclePrices/OraclePrices.tsx","Components/BottomBar/BottomBar.tsx","Components/Home/Home.tsx","Components/App/App.tsx","reportWebVitals.ts","redux/index.ts","index.tsx","utils/notify.tsx","utils/wallet-config.ts","Components/OpenLoan/OpenLoan.tsx"],"names":["OpenLoanButton","publicKey","useWallet","dispatch","useDispatch","className","onClick","setOpenLoanModal","disabled","variant","LOAN_LIST_SCANNER_TIMEOUT","NAV_BAR_SCREEN_MIN_WIDTH_FOR_WALLET_BUTTON","LOAN_LIST_SCREEN_MIN_WIDTH_FOR_ROWS_DISPLAY","PYTH_SOLANA_CLUSTER_NAME","KONG_MINT_AUTHORITY_SEED","BANANA_MINT_AUTHORITY_SEED","PROGRAM_VAULT_SEED","KONG_LOAN_ACCOUNT_SIZE","PROGRAM_STATE_ACCOUNT","PublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","BANANA_MINT","KONG_MINT","KONGS_HOARD","SOL_ORACLE_PRODUCT","SOL_ORACLE_PRICE","KONG_ORACLE_PRODUCT","KONG_ORACLE_PRICE","MARINADE_PROGRAM_ID","MARINADE_STATE_ID","MSOL_MINT","MSOL_MINT_AUTH","SOL_LEG","MSOL_LEG","MSOL_LEG_AUTHORITY_INFO","RESERVE_PDA_INFO","MSOL_TREASURY","RAD_ID","SYSTEM_PROGRAM_ID","SOLANA_TOKEN_ID","RENT_PROGRAM_ID","findAssociatedTokenAddress","walletAddress","tokenMintAddress","a","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","CloseLoan","props","connection","useConnection","sendTransaction","useState","loading","setLoading","notify","useNotify","useCallback","signature","owner","user_banana_transfer_authority","Keypair","bananaAtaAddress","createWithSeed","loanAccount","program_vault_derived_pubKey","programVaultAuthority","dataLayout","struct","u8","data","Buffer","alloc","span","encode","instruction","transaction","Transaction","add","spl","createApproveInstruction","loanAmount","TransactionInstruction","keys","pubkey","isSigner","isWritable","programId","getTokenAccountBalance","walletBalance","walletBalanceBananas","value","uiAmount","LAMPORTS_PER_SOL","Error","toFixed","signers","setScanForNewLoans","confirmTransaction","message","color","size","buttonSize","text","getBigNumber","num","undefined","parseFloat","toString","borshPublicKey","u64","i64","LoanList","loans","useSelector","getLoans","componentIsMounted","useRef","smallScreen","getScreen","windowWidth","setNotifier","walletKey","equals","setLoansList","useEffect","setScanTimer","current","processAccountsList","accounts","loanList","i","length","account","layout","decode","from","timestamp","loan_creation_date","dateTxt","Date","toLocaleDateString","push","collateral","collateral_amount","marketPrice","market_price","loan_amount","dateOpened","getProgramAccounts","commitment","filters","memcmp","bytes","offset","then","list","getAccounts","loansList","currentLoanTotal","checkTimeout","scan","scanTimer","getTime","setInterval","checkAccountsTotal","theme","createTheme","components","MuiTableCell","styleOverrides","root","MuiTableContainer","backgroundColor","component","sx","fontSize","m","src","alt","width","marginLeft","loansSorted","Object","assign","sort","b","muiTableCellOverride","borderBottom","padding","map","row","bgcolor","border","raised","aria-label","scope","container","direction","alignItems","style","marginTop","align","numberWithCommas","Math","round","Paper","minWidth","initialState","screen","windowHeight","oraclePrices","SOL_USD","BANANA_USD","KONG_USD","timer","tab","setScreen","typedAction","setArbTransactionSignature","arbTransactionSignature","setOraclePrices","price","setOracleTimer","oracleTimer","setTab","appReducer","state","action","type","produce","draftState","payload","clearInterval","app","getArbTransactionSignature","getSelectedTab","getOraclePrices","CssTextField","styled","TextField","borderBottomColor","borderColor","useStyles","makeStyles","link","display","textDecoration","icon","Arbitrage","arbToken","setArbToken","amount","setAmount","styles","handleSetAmount","ev","validNumericTrailingCharCheck","target","changeArbDirection","arbitrageBananas","nu64","lamports","getCollateralAsNumber","kongATA","kongMintAuthority","bananaATA","transactionItems","getAccountInfo","dataLayoutATA","ataData","arbitrageKong","bananaMintAuthority","walletBalanceKONG","id","autoFocus","fullWidth","onChange","bind","label","flexGrow","spacing","item","xs","title","placement","position","top","href","WALLET_ADAPTER_NETWORK","ArbBananasEstimate","calculateArbAmount","LoanAmountEstimate","calculateLoanAmount","ArbKongEstimate","calculateArbAmountKong","openLoanTransactionSignature","scanStartTime","openLoanModal","setOpenLoanTransactionSignature","startTime","open","loansReducer","currentTime","getOpenLoanModal","getOpenLoanTransactionSignature","replace","filtered","replaceAll","slice","match","solPrice","depositValue","loanEst","internationalNumberFormat","Intl","NumberFormat","format","priceData","swapEstimate","Wallet","featuredWallets","logo","children","NavBar","AppBar","Toolbar","Box","Grid","textAlign","a11yProps","index","FullWidthTabs","selectedTab","MuiAppBar","MuiTabs","indicator","ThemeProvider","Tabs","event","newValue","indicatorColor","textColor","Tab","TabPanel","other","role","hidden","aria-labelledby","MainBox","Item","typography","body2","palette","secondary","columns","justifyContent","OraclePrices","useMemo","Connection","clusterApiUrl","pythPublicKey","getPythProgramKeyForCluster","getPrices","handleAccounts","productOnly","base","parseBaseData","AccountType","parseProductData","priceAccountKey","product","productAccountKeyToProduct","priceAccountKeyToProductAccountKey","productLookup","parsePriceData","marketToPriceData","symbol","Typography","BottomBar","elevation","Divider","orientation","flexItem","Home","network","endpoint","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getLedgerWallet","getSolletWallet","getSolletExtensionWallet","onError","e","handleWalletError","autoConnect","OpenLoan","App","handler","window","innerWidth","innerHeight","addEventListener","removeEventListener","maxSnack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById","notification","enqueueSnackbar","useSnackbar","WalletAdapterNetwork","Devnet","setCollateral","handleClose","createLoan","banana_mint_authority","loan_account","userMSolAtaAddress","SystemProgram","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","createAccount","AccountLayout","basePubkey","seed","createAccountWithSeed","Token","createInitAccountInstruction","openLoanTransactionItems","dataLayoutMSolATA","mSolAtaData","getBalance","walletBalanceSOL","WalletSendTransactionError","aria-describedby","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","in","left","transform","boxShadow","p","flexWrap"],"mappings":"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","file":"static/js/main.4b359592.chunk.js","sourcesContent":["import { useWallet } from '@solana/wallet-adapter-react'\nimport { FC } from 'react'\nimport { Button } from '@mui/material'\nimport { useDispatch } from 'react-redux'\nimport { setOpenLoanModal } from '../../redux/modules/loans'\n\nexport const OpenLoanButton: FC = () => {\n  const { publicKey } = useWallet()\n  const dispatch = useDispatch()\n  const handleOpen = () => dispatch(setOpenLoanModal(true))\n\n  return (\n    <div>\n      <Button\n        className=\"Open-loan-button\"\n        onClick={handleOpen}\n        disabled={!publicKey}\n        variant={'contained'}\n      >\n        Open New Loan\n      </Button>\n    </div>\n  )\n}\n","import { Cluster, PublicKey } from '@solana/web3.js'\n\nexport const LOAN_LIST_SCANNER_TIMEOUT = 60\n\n// minimum screen width required in order to display wallet connect button in top nav bar\nexport const NAV_BAR_SCREEN_MIN_WIDTH_FOR_WALLET_BUTTON = 768\n\n// minimum screen width required to display loan list in rows\nexport const LOAN_LIST_SCREEN_MIN_WIDTH_FOR_ROWS_DISPLAY = 1024\n\n// UI Only, this is not for the backend smart contract.\nexport const PYTH_SOLANA_CLUSTER_NAME: Cluster = 'devnet'\n\nexport const KONG_MINT_AUTHORITY_SEED = 'kong_mint'\nexport const BANANA_MINT_AUTHORITY_SEED = 'banana_mint'\nexport const PROGRAM_VAULT_SEED = 'PROGRAM_VAULT'\n\nexport const KONG_STATE_ACCOUNT_SIZE = 283\nexport const KONG_LOAN_ACCOUNT_SIZE = 257\n\nexport const CREATOR_AUTHORITY: PublicKey = new PublicKey(\n  '4ZKXWewnacnm2ApTJC68DzoNHaJg6gtTXZA3LLumfMtX'\n)\n\nexport const PROGRAM_CREATOR_AUTHORITY: PublicKey = new PublicKey(\n  '9kyWPBeU9RnjxnWkkYKYVeShAwQgPDmxujr77thREZtN'\n)\n\nexport const PROGRAM_STATE_ACCOUNT = new PublicKey(\n  'EvcBDSzxPM5WjQjgZGiewFpyKW9cEAVGoQeBkRMZo7uU'\n)\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID: PublicKey = new PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'\n)\n\nexport const BANANA_MINT = new PublicKey(\n  '98ct6KjzotM4e6Hn2PdBhYTJfi7yYDBhxVjcC21H7oUF'\n)\n\nexport const KONG_MINT = new PublicKey(\n  'CY5mvkTFqgiHQd4Fbb5ykv6aKCpczJVbxWxFXpCZZCJc'\n)\n\nexport const KONGS_HOARD = new PublicKey(\n  'HADUDXZsxpv5Nb4M81EaAHh6VxkSKkuDtdUsPHXm3Sv9'\n)\n\n// PYTH\nexport const SOL_ORACLE_PRODUCT = new PublicKey(\n  '3Mnn2fX6rQyUsyELYms1sBJyChWofzSNRoqYzvgMVz5E'\n)\n\nexport const SOL_ORACLE_PRICE = new PublicKey(\n  'J83w4HKfqxwcq3BEMMkPFSppX3gqekLyLJBexebFVkix'\n)\n\nexport const BANANA_ORACLE_PRODUCT = new PublicKey(\n  '5SSkXsEKQepHHAewytPVwdej4epN1nxgLVM84L4KXgy7'\n)\nexport const BANANA_ORACLE_PRICE = new PublicKey(\n  '5SSkXsEKQepHHAewytPVwdej4epN1nxgLVM84L4KXgy7'\n)\n\nexport const KONG_ORACLE_PRODUCT = new PublicKey(\n  '2ciUuGZiee5macAMeQ7bHGTJtwcYTgnt6jdmQnnKZrfu'\n)\nexport const KONG_ORACLE_PRICE = new PublicKey(\n  'EdVCmQ9FSPcVe5YySXDPCRmc8aDQLKJ9xvYBMZPie1Vw'\n)\n\n// Marinade\nexport const MARINADE_PROGRAM_ID = new PublicKey(\n  'MarBmsSgKXdrN1egZf5sqe1TMai9K1rChYNDJgjq7aD'\n)\n\nexport const MARINADE_STATE_ID = new PublicKey(\n  '8szGkuLTAux9XMgZ2vtY39jVSowEcpBfFfD8hXSEqdGC'\n)\n\nexport const MSOL_MINT: PublicKey = new PublicKey(\n  'mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So'\n)\n\nexport const MSOL_MINT_AUTH: PublicKey = new PublicKey(\n  '3JLPCS1qM2zRw3Dp6V4hZnYHd4toMNPkNesXdX9tg6KM'\n)\n\nexport const SOL_LEG: PublicKey = new PublicKey(\n  'UefNb6z6yvArqe4cJHTXCqStRsKmWhGxnZzuHbikP5Q'\n)\n\nexport const MSOL_LEG: PublicKey = new PublicKey(\n  '7GgPYjS5Dza89wV6FpZ23kUJRG5vbQ1GM25ezspYFSoE'\n)\n\nexport const MSOL_LEG_AUTHORITY_INFO: PublicKey = new PublicKey(\n  'EyaSjUtSgo9aRD1f8LWXwdvkpDTmXAW54yoSHZRF14WL'\n)\n\nexport const RESERVE_PDA_INFO: PublicKey = new PublicKey(\n  'Du3Ysj1wKbxPKkuPPnvzQLQh8oMSVifs3jGZjJWXFmHN'\n)\n\nexport const MSOL_TREASURY: PublicKey = new PublicKey(\n  '8ZUcztoAEhpAeC2ixWewJKQJsSUGYSGPVAjkhDJYf5Gd'\n)\n\n// END Marinade\n\nexport const RAD_ID = new PublicKey(\n  '2vLPCe92GpHKJRGDp9GjZRzAyeLh6RtW1ACAi9n4Fa1u'\n)\n\nexport const SYSTEM_PROGRAM_ID = new PublicKey(\n  '11111111111111111111111111111111'\n)\n\nexport const SOLANA_TOKEN_ID = new PublicKey('11111111111111111111111111111111')\nexport const RENT_PROGRAM_ID = new PublicKey(\n  'SysvarRent111111111111111111111111111111111'\n)\nexport const CLOCK_PROGRAM_ID = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111'\n)\nexport const SOL_MINT = new PublicKey('11111111111111111111111111111111')\n","import { useConnection, useWallet } from '@solana/wallet-adapter-react'\nimport {\n  Keypair,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  Signer,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n} from '@solana/web3.js'\nimport * as spl from '@solana/spl-token'\nimport { FC, useCallback, useState } from 'react'\nimport {\n  BANANA_MINT,\n  KONGS_HOARD,\n  MARINADE_PROGRAM_ID,\n  MARINADE_STATE_ID,\n  MSOL_LEG,\n  MSOL_MINT,\n  MSOL_TREASURY,\n  PROGRAM_STATE_ACCOUNT,\n  PROGRAM_VAULT_SEED,\n  RAD_ID,\n  SOL_LEG,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  SYSTEM_PROGRAM_ID,\n} from '../../utils/constants'\nimport { Button, CircularProgress } from '@mui/material'\nimport { struct, u8 } from '@solana/buffer-layout'\nimport { useDispatch } from 'react-redux'\nimport { useNotify } from '../../utils/notify'\nimport { setScanForNewLoans } from '../../redux/modules/loans'\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token'\n\ninterface CloseLoanProps {\n  loanAccount: PublicKey\n  loanAmount: number\n  buttonSize?: 'small' | 'large' | 'medium' | undefined\n  text?: string\n}\n\nasync function findAssociatedTokenAddress(\n  walletAddress: PublicKey,\n  tokenMintAddress: PublicKey\n): Promise<PublicKey> {\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        walletAddress.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        tokenMintAddress.toBuffer(),\n      ],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0]\n}\n\nexport const CloseLoan: FC<CloseLoanProps> = (props) => {\n  const { connection } = useConnection()\n  const { publicKey, sendTransaction } = useWallet()\n  const [loading, setLoading] = useState(false)\n  const dispatch = useDispatch()\n  const notify = useNotify()\n\n  const onClick = useCallback(async () => {\n    if (!publicKey) {\n      notify('error', 'Wallet not connected!')\n      return\n    }\n\n    let signature: TransactionSignature = ''\n    try {\n      setLoading(true)\n      const owner = publicKey\n\n      const user_banana_transfer_authority = new Keypair()\n\n      // const user_banana_account_seed = 'USER_BANANA_ACCOUNT'\n      // const user_banana_account_derived_pubKey = await PublicKey.createWithSeed(\n      //   props.loanAccount,\n      //   user_banana_account_seed,\n      //   TOKEN_PROGRAM_ID\n      // )\n      const bananaAtaAddress = await findAssociatedTokenAddress(\n        owner,\n        BANANA_MINT\n      )\n\n      const program_vault_derived_pubKey = await PublicKey.createWithSeed(\n        props.loanAccount,\n        PROGRAM_VAULT_SEED,\n        TOKEN_PROGRAM_ID\n      )\n      const programVaultAuthority = await PublicKey.findProgramAddress(\n        [props.loanAccount.toBuffer(), program_vault_derived_pubKey.toBuffer()],\n        RAD_ID\n      )\n\n      let dataLayout = struct([u8('instruction')])\n      const data = Buffer.alloc(dataLayout.span)\n      dataLayout.encode(\n        {\n          instruction: 1,\n        },\n        data\n      )\n\n      const transaction = new Transaction().add(\n        // Approve the transfer of the stable coin\n        spl.Token.createApproveInstruction(\n          TOKEN_PROGRAM_ID,\n          bananaAtaAddress,\n          user_banana_transfer_authority.publicKey,\n          owner,\n          [],\n          props.loanAmount\n        ),\n        // send close loan instruction\n        new TransactionInstruction({\n          keys: [\n            {\n              pubkey: PROGRAM_STATE_ACCOUNT,\n              isSigner: false,\n              isWritable: false,\n            },\n            { pubkey: MARINADE_STATE_ID, isSigner: false, isWritable: true },\n            { pubkey: props.loanAccount, isSigner: false, isWritable: true },\n            {\n              pubkey: program_vault_derived_pubKey,\n              isSigner: false,\n              isWritable: true,\n            },\n            { pubkey: owner, isSigner: false, isWritable: true },\n            { pubkey: BANANA_MINT, isSigner: false, isWritable: true },\n            {\n              pubkey: bananaAtaAddress,\n              isSigner: false,\n              isWritable: true,\n            },\n            {\n              pubkey: user_banana_transfer_authority.publicKey,\n              isSigner: true,\n              isWritable: false,\n            },\n            {\n              pubkey: programVaultAuthority[0],\n              isSigner: false,\n              isWritable: false,\n            },\n            {\n              pubkey: KONGS_HOARD,\n              isSigner: false,\n              isWritable: true,\n            },\n            {\n              pubkey: MSOL_MINT,\n              isSigner: false,\n              isWritable: true,\n            },\n            {\n              pubkey: SOL_LEG,\n              isSigner: false,\n              isWritable: true,\n            },\n            {\n              pubkey: MSOL_LEG,\n              isSigner: false,\n              isWritable: true,\n            },\n            {\n              pubkey: MSOL_TREASURY,\n              isSigner: false,\n              isWritable: true,\n            },\n            { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\n            { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n            { pubkey: MARINADE_PROGRAM_ID, isSigner: false, isWritable: false },\n          ],\n          programId: RAD_ID,\n          data,\n        })\n      )\n\n      const walletBalance = await connection.getTokenAccountBalance(\n        bananaAtaAddress\n      )\n      const walletBalanceBananas = walletBalance.value.uiAmount\n      if (\n        walletBalanceBananas &&\n        walletBalanceBananas <= props.loanAmount / LAMPORTS_PER_SOL\n      ) {\n        throw Error(\n          `Insufficient wallet balance of ${walletBalanceBananas.toFixed(\n            5\n          )} Bananas for transaction of ${\n            props.loanAmount / LAMPORTS_PER_SOL\n          } Bananas.`\n        )\n      }\n\n      notify('info', 'Close Loan Request Approval Needed')\n      const signers: Signer[] = [user_banana_transfer_authority]\n\n      signature = await sendTransaction(transaction, connection, {\n        signers: signers,\n      })\n      notify('info', 'Transaction sent:', signature)\n      dispatch(setScanForNewLoans(true))\n\n      await connection.confirmTransaction(signature, 'processed')\n      notify('success', 'Transaction successful!', signature)\n    } catch (error: any) {\n      setLoading(false)\n      dispatch(setScanForNewLoans(false))\n      notify('error', `Transaction failed! ${error?.message}`, signature)\n      return\n    }\n  }, [publicKey, props, connection, sendTransaction, dispatch, notify])\n\n  return (\n    <>\n      {loading ? (\n        <CircularProgress color=\"success\" />\n      ) : (\n        <Button\n          size={props.buttonSize}\n          onClick={onClick}\n          disabled={!publicKey}\n          variant={'contained'}\n        >\n          {props.text ? props.text : 'Close Loan'}\n        </Button>\n      )}\n    </>\n  )\n}\n","import {\n  Box,\n  Card,\n  CardActions,\n  CardContent,\n  CircularProgress,\n  createTheme,\n  Grid,\n  LinearProgress,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  ThemeProvider,\n  Typography,\n} from '@mui/material'\nimport ArrowRightIcon from '@mui/icons-material/ArrowRight'\nimport {\n  publicKey as borshPublicKey,\n  u64,\n  i64,\n  u8,\n  struct,\n} from '@project-serum/borsh'\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react'\nimport { AccountInfo, LAMPORTS_PER_SOL, PublicKey } from '@solana/web3.js'\nimport { FC, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { LoansList } from '../../types'\nimport {\n  LOAN_LIST_SCREEN_MIN_WIDTH_FOR_ROWS_DISPLAY,\n  RAD_ID,\n} from '../../utils/constants'\nimport { CloseLoan } from '../CloseLoan/CloseLoan'\nimport {\n  checkTimeout,\n  getLoans,\n  setLoansList,\n  setNotifier,\n  setScanTimer,\n} from '../../redux/modules/loans'\nimport { useNotify } from '../../utils/notify'\nimport { numberWithCommas } from '../../utils/helpers'\nimport { SxProps } from '@mui/system'\nimport { OpenLoanButton } from '../OpenLoan/OpenLoanButton'\nimport { getScreen } from '../../redux/modules/app'\n\nfunction getBigNumber(num: any) {\n  return num === undefined || num === null ? 0 : parseFloat(num.toString())\n}\n\nlet dataLayout = struct([\n  u8('version'),\n  borshPublicKey('owner'),\n  u64('collateral_amount'),\n  u64('market_price'),\n  u64('loan_amount'),\n  borshPublicKey('loan_mint'),\n  i64('loan_creation_date'),\n  borshPublicKey('vault'),\n])\n\nexport const LoanList: FC = () => {\n  const { connection } = useConnection()\n  const { publicKey } = useWallet()\n  const dispatch = useDispatch()\n  const loans = useSelector(getLoans)\n  const componentIsMounted = useRef(true)\n  const notify = useNotify()\n  const { windowWidth } = useSelector(getScreen)\n  const smallScreen = windowWidth < LOAN_LIST_SCREEN_MIN_WIDTH_FOR_ROWS_DISPLAY\n\n  if (!loans.notify) {\n    dispatch(setNotifier(notify))\n  }\n\n  if (publicKey && !loans.walletKey?.equals(publicKey)) {\n    dispatch(setLoansList([], publicKey))\n  }\n\n  useEffect(() => {\n    return () => {\n      dispatch(setScanTimer(null, null))\n      componentIsMounted.current = false\n    }\n  }, [dispatch])\n\n  const processAccountsList = (\n    accounts: Array<{\n      pubkey: PublicKey\n      account: AccountInfo<Buffer>\n    }>\n  ) => {\n    let loanList: LoansList[] = []\n    for (var i = 0; i < accounts.length; i++) {\n      const data = accounts[i].account.data\n      const layout = dataLayout.decode(Buffer.from(data))\n\n      const timestamp = getBigNumber(layout.loan_creation_date) * 1000\n      const dateTxt = new Date(timestamp).toLocaleDateString('en-us')\n\n      loanList.push({\n        loanAccount: accounts[i].pubkey,\n        collateral: getBigNumber(layout.collateral_amount),\n        marketPrice: getBigNumber(layout.market_price),\n        loanAmount: getBigNumber(layout.loan_amount),\n        dateOpened: dateTxt,\n        timestamp: timestamp,\n      })\n    }\n\n    if (loanList.length) {\n      dispatch(setLoansList(loanList, publicKey))\n    } else {\n      dispatch(setLoansList(null, publicKey))\n    }\n  }\n\n  useEffect(() => {\n    async function getAccounts() {\n      if (publicKey) {\n        const accounts = connection.getProgramAccounts(RAD_ID, {\n          commitment: 'max',\n          filters: [\n            {\n              memcmp: {\n                bytes: publicKey.toString(),\n                offset: 1,\n              },\n            },\n          ],\n        })\n\n        if (componentIsMounted.current) {\n          accounts.then((accounts) => processAccountsList(accounts))\n        }\n      } else {\n        notify('warning', 'Wallet Not Connected')\n      }\n    }\n\n    // GET LOAN LIST\n    if (publicKey && loans.list?.length === 0) {\n      getAccounts()\n    }\n  })\n\n  useEffect(() => {\n    async function checkAccountsTotal(loansList: LoansList[] | null) {\n      const currentLoanTotal = loansList ? loansList.length : 0\n\n      if (publicKey) {\n        const accounts = connection.getProgramAccounts(RAD_ID, {\n          commitment: 'max',\n          filters: [\n            {\n              memcmp: {\n                bytes: publicKey.toString(),\n                offset: 1,\n              },\n            },\n          ],\n        })\n\n        if (componentIsMounted.current) {\n          accounts.then((accounts) => {\n            dispatch(checkTimeout())\n            if (accounts.length !== currentLoanTotal) {\n              processAccountsList(accounts)\n            }\n          })\n        }\n      } else {\n        notify('warning', 'Wallet Not Connected')\n      }\n    }\n\n    // SCAN FOR CHANGES TO ACCOUNTS TOTAL\n    if (publicKey && loans.scan && loans.scanTimer === null) {\n      dispatch(\n        setScanTimer(\n          new Date().getTime(),\n          setInterval(() => checkAccountsTotal(loans.list), 5000)\n        )\n      )\n    }\n  })\n\n  const theme = createTheme({\n    components: {\n      MuiTableCell: {\n        styleOverrides: {\n          root: {\n            color: 'white',\n          },\n        },\n      },\n      MuiTableContainer: {\n        styleOverrides: {\n          root: {\n            backgroundColor: 'transparent',\n          },\n        },\n      },\n    },\n  })\n\n  if (loans.scan) {\n    return (\n      <>\n        <Typography component=\"div\">\n          <Box\n            className=\"Updating-loan-list-text\"\n            sx={{ fontSize: 'h5.fontSize', m: 1 }}\n          >\n            Updating Loan List\n          </Box>\n          <div>\n            <img\n              className={'Dancing-banana'}\n              src=\"/dancing-banana.gif\"\n              alt=\"Updating Loan List\"\n            />\n          </div>\n        </Typography>\n        <br />\n        <LinearProgress sx={{ width: '30%', marginLeft: '35%' }} />\n      </>\n    )\n  } else if (loans.list?.length) {\n    let loansUnsorted: LoansList[] = Object.assign([], loans.list)\n    let loansSorted: LoansList[] = loansUnsorted.sort((a, b) => {\n      if (a.timestamp > b.timestamp) {\n        return -1\n      } else if (a.timestamp < b.timestamp) {\n        return 1\n      } else {\n        return 0\n      }\n    })\n    if (smallScreen) {\n      const muiTableCellOverride: SxProps = {\n        borderBottom: '0px',\n        padding: '0px',\n      }\n      return (\n        <>\n          <OpenLoanButton />\n          <br />\n          <ThemeProvider theme={theme}>\n            {loansSorted.map((row) => (\n              <div key={row.timestamp}>\n                <Card\n                  sx={{\n                    bgcolor: 'transparent',\n                    border: '1px solid rgb(76, 136, 86)',\n                  }}\n                  variant=\"outlined\"\n                  raised={false}\n                >\n                  <CardContent sx={{ padding: '5px' }}>\n                    <TableContainer>\n                      <Table aria-label=\"simple table\">\n                        <tbody>\n                          <TableRow>\n                            <TableCell sx={muiTableCellOverride}>\n                              Collateral Amount (SOL):\n                            </TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell\n                              sx={muiTableCellOverride}\n                              className=\"Loan-list-cell-value\"\n                              component=\"th\"\n                              scope=\"row\"\n                            >\n                              <Grid container direction=\"row\" alignItems=\"left\">\n                                <ArrowRightIcon />\n                                <span style={{ marginTop: '2px' }}>\n                                  {row.collateral / LAMPORTS_PER_SOL}\n                                </span>\n                              </Grid>\n                            </TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell sx={muiTableCellOverride} align=\"left\">\n                              SOL/USD Market Price:\n                            </TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell\n                              sx={muiTableCellOverride}\n                              className=\"Loan-list-cell-value\"\n                              align=\"left\"\n                            >\n                              <Grid container direction=\"row\" alignItems=\"left\">\n                                <ArrowRightIcon />\n                                <span style={{ marginTop: '2px' }}>\n                                  ${row.marketPrice}\n                                </span>\n                              </Grid>\n                            </TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell sx={muiTableCellOverride} align=\"left\">\n                              Loan Amount:\n                            </TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell\n                              sx={muiTableCellOverride}\n                              className=\"Loan-list-cell-value\"\n                              align=\"left\"\n                            >\n                              <Grid container direction=\"row\" alignItems=\"left\">\n                                <ArrowRightIcon />\n                                <span style={{ marginTop: '2px' }}>\n                                  {numberWithCommas(\n                                    Math.round(\n                                      row.loanAmount / LAMPORTS_PER_SOL\n                                    )\n                                  )}\n                                </span>\n                              </Grid>\n                            </TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell sx={muiTableCellOverride} align=\"left\">\n                              Date Opened:\n                            </TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell\n                              sx={muiTableCellOverride}\n                              className=\"Loan-list-cell-value\"\n                              align=\"left\"\n                            >\n                              <Grid container direction=\"row\" alignItems=\"left\">\n                                <ArrowRightIcon />\n                                <span style={{ marginTop: '2px' }}>\n                                  {row.dateOpened}\n                                </span>\n                              </Grid>\n                            </TableCell>\n                          </TableRow>\n                        </tbody>\n                      </Table>\n                    </TableContainer>\n                  </CardContent>\n                  <CardActions>\n                    <CloseLoan\n                      loanAccount={row.loanAccount}\n                      loanAmount={row.loanAmount}\n                      buttonSize=\"small\"\n                      text=\"Close Loan\"\n                    />\n                  </CardActions>\n                </Card>\n                <br />\n              </div>\n            ))}\n          </ThemeProvider>\n        </>\n      )\n    } else {\n      return (\n        <>\n          <OpenLoanButton />\n          <br />\n          <ThemeProvider theme={theme}>\n            <TableContainer component={Paper}>\n              <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Collateral Amount (SOL)</TableCell>\n                    <TableCell align=\"right\">SOL/USD Market Price</TableCell>\n                    <TableCell align=\"right\">Loan Amount</TableCell>\n                    <TableCell align=\"right\">Date Opened</TableCell>\n                    <TableCell align=\"right\"></TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {loansSorted.map((row) => (\n                    <TableRow\n                      sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                      key={row.timestamp}\n                    >\n                      <TableCell component=\"th\" scope=\"row\">\n                        {row.collateral / LAMPORTS_PER_SOL}\n                      </TableCell>\n                      <TableCell align=\"right\">${row.marketPrice}</TableCell>\n                      <TableCell align=\"right\">\n                        {numberWithCommas(\n                          Math.round(row.loanAmount / LAMPORTS_PER_SOL)\n                        )}\n                      </TableCell>\n                      <TableCell align=\"right\">{row.dateOpened}</TableCell>\n                      <TableCell align=\"right\">\n                        <CloseLoan\n                          loanAccount={row.loanAccount}\n                          loanAmount={row.loanAmount}\n                          buttonSize=\"small\"\n                          text=\"Close Loan\"\n                        />\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </ThemeProvider>\n        </>\n      )\n    }\n  } else if (loans.list == null) {\n    if (smallScreen) {\n      return (\n        <>\n          <OpenLoanButton />\n          <Typography component=\"div\">\n            <Box sx={{ fontSize: 'h5.fontSize', m: 1 }}>No Open Loans</Box>\n            <img className=\"Banana-peel\" src=\"/BananaPeel.png\" alt=\"No Loans\" />\n          </Typography>\n        </>\n      )\n    } else {\n      return (\n        <>\n          <OpenLoanButton />\n          <Typography component=\"div\">\n            <Box sx={{ fontSize: 'h5.fontSize', m: 1 }}>\n              You Have No Loans Currently Open With Wallet ID:\n            </Box>\n            <Box sx={{ fontSize: 'h8.fontSize', m: 1 }}>\n              {publicKey?.toString()}\n            </Box>\n            <img className=\"Banana-peel\" src=\"/BananaPeel.png\" alt=\"No Loans\" />\n          </Typography>\n        </>\n      )\n    }\n  } else {\n    return <CircularProgress />\n  }\n}\n","import { typedAction } from '../helpers'\nimport { AppState, OraclePrices, WindowSize } from '../../types'\nimport produce from 'immer'\nimport { RootState } from '..'\n\nconst initialState: AppState = {\n  screen: {\n    windowHeight: 0,\n    windowWidth: 0,\n  },\n  oraclePrices: {\n    SOL_USD: null,\n    BANANA_USD: null,\n    KONG_USD: null,\n    timer: null,\n  },\n  tab: 0,\n}\n\n// DISPATCHES\nexport const setScreen = (screen: WindowSize) => {\n  return typedAction('app/SET_SCREEN', {\n    screen: screen,\n  })\n}\n\nexport const setArbTransactionSignature = (\n  arbTransactionSignature?: string\n) => {\n  return typedAction('app/SET_ARB_TRANSACTION_SIGNATURE', {\n    arbTransactionSignature: arbTransactionSignature,\n  })\n}\n\nexport const setOraclePrices = (price: OraclePrices) => {\n  return typedAction('app/SET_ORACLE_PRICES', {\n    SOL_USD: price.SOL_USD,\n    BANANA_USD: price.BANANA_USD,\n    KONG_USD: price.KONG_USD,\n  })\n}\n\nexport const setOracleTimer = (oracleTimer: NodeJS.Timer | null) => {\n  return typedAction('app/SET_ORACLE_TIMER', {\n    oracleTimer: oracleTimer,\n  })\n}\n\nexport const setTab = (tab: number) => {\n  return typedAction('app/SET_TAB', {\n    tab: tab,\n  })\n}\n\ntype AppStateAction = ReturnType<\n  | typeof setScreen\n  | typeof setArbTransactionSignature\n  | typeof setOraclePrices\n  | typeof setOracleTimer\n  | typeof setTab\n>\n\n// REDUCER\nexport function appReducer(\n  state: AppState = initialState,\n  action: AppStateAction\n): AppState {\n  switch (action.type) {\n    case 'app/SET_SCREEN':\n      return produce(state, (draftState: AppState) => {\n        draftState.screen = action.payload.screen\n      })\n    case 'app/SET_ARB_TRANSACTION_SIGNATURE':\n      return produce(state, (draftState: AppState) => {\n        draftState.arbTransactionSignature =\n          action.payload.arbTransactionSignature\n      })\n    case 'app/SET_TAB':\n      return produce(state, (draftState: AppState) => {\n        draftState.tab = action.payload.tab\n      })\n    case 'app/SET_ORACLE_PRICES':\n      return produce(state, (draftState: AppState) => {\n        draftState.oraclePrices.SOL_USD = action.payload.SOL_USD\n        draftState.oraclePrices.BANANA_USD = action.payload.BANANA_USD\n        draftState.oraclePrices.KONG_USD = action.payload.KONG_USD\n      })\n    case 'app/SET_ORACLE_TIMER':\n      return produce(state, (draftState: AppState) => {\n        if (draftState.oraclePrices.timer) {\n          clearInterval(draftState.oraclePrices.timer)\n        }\n        draftState.oraclePrices.timer = action.payload.oracleTimer\n      })\n    default:\n      return state\n  }\n}\n\n// SELECTORS\nexport const getScreen = (state: RootState) => state.app.screen\nexport const getArbTransactionSignature = (state: RootState) =>\n  state.app.arbTransactionSignature\nexport const getSelectedTab = (state: RootState) => state.app.tab\nexport const getOraclePrices = (state: RootState) => state.app.oraclePrices\n","import './Arbitrage.css'\nimport {\n  Typography,\n  Box,\n  Grid,\n  Tooltip,\n  styled,\n  TextField,\n  CircularProgress,\n  Link,\n  Button,\n} from '@mui/material'\nimport { u8, struct, nu64 } from '@solana/buffer-layout'\nimport { makeStyles } from '@material-ui/core'\nimport { FC, useCallback, useState } from 'react'\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline'\nimport { ArbToken } from '../../types'\nimport { ArbBananasEstimate } from './ArbBananasEstimate'\nimport { ArbKongEstimate } from './ArbKongEstimate'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  getArbTransactionSignature,\n  setArbTransactionSignature,\n} from '../../redux/modules/app'\nimport LaunchIcon from '@material-ui/icons/Launch'\nimport { WALLET_ADAPTER_NETWORK } from '../../utils/wallet-config'\nimport {\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  Signer,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n} from '@solana/web3.js'\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token'\nimport {\n  BANANA_MINT,\n  BANANA_MINT_AUTHORITY_SEED,\n  KONG_MINT,\n  KONG_MINT_AUTHORITY_SEED,\n  KONG_ORACLE_PRICE,\n  KONG_ORACLE_PRODUCT,\n  PROGRAM_STATE_ACCOUNT,\n  RAD_ID,\n  RENT_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  SYSTEM_PROGRAM_ID,\n} from '../../utils/constants'\nimport { useNotify } from '../../utils/notify'\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react'\nimport {\n  getCollateralAsNumber,\n  validNumericTrailingCharCheck,\n} from '../../utils/helpers'\n\nexport const CssTextField = styled(TextField)({\n  '& label.MuiInputLabel': {\n    color: 'white',\n  },\n  '& label.MuiInputLabel-root': {\n    color: 'white',\n  },\n  '& label.Mui-focused': {\n    color: 'white',\n  },\n  '& .MuiInput-underline:after': {\n    borderBottomColor: 'green',\n  },\n  '& .MuiInputBase-root': {\n    color: 'white',\n    backgroundColor: 'transparent',\n  },\n  '& .MuiOutlinedInput-root': {\n    '& fieldset': {\n      borderColor: 'green',\n    },\n    '&:hover fieldset': {\n      borderColor: 'white',\n    },\n    '&.Mui-focused fieldset': {\n      borderColor: 'green',\n    },\n  },\n})\n\nexport const useStyles = makeStyles({\n  link: {\n    color: '#ffffff',\n    display: 'flex',\n    alignItems: 'right',\n    textDecoration: 'underline',\n    '&:hover': {\n      color: '#000000',\n    },\n  },\n  icon: {\n    fontSize: 20,\n  },\n})\n\nasync function findAssociatedTokenAddress(\n  walletAddress: PublicKey,\n  tokenMintAddress: PublicKey\n): Promise<PublicKey> {\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        walletAddress.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        tokenMintAddress.toBuffer(),\n      ],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0]\n}\n\nexport const Arbitrage: FC = () => {\n  const { connection } = useConnection()\n  const { publicKey, sendTransaction } = useWallet()\n  const [loading, setLoading] = useState(false)\n  const [arbToken, setArbToken] = useState<ArbToken>('BANANA')\n  const [amount, setAmount] = useState<string>('')\n  const dispatch = useDispatch()\n  const arbTransactionSignature = useSelector(getArbTransactionSignature)\n  const styles = useStyles()\n  const notify = useNotify()\n\n  function handleSetAmount(ev: React.ChangeEvent<HTMLInputElement>) {\n    if (validNumericTrailingCharCheck(ev.target.value)) {\n      setAmount(validNumericTrailingCharCheck(ev.target.value))\n    } else if (ev.target.value === '') {\n      setAmount('')\n    }\n  }\n\n  const changeArbDirection = useCallback(() => {\n    setAmount('')\n    if (arbToken === 'BANANA') {\n      setArbToken('KONG')\n    } else {\n      setArbToken('BANANA')\n    }\n  }, [arbToken])\n\n  const arbitrageBananas = useCallback(async () => {\n    if (!publicKey) {\n      notify('error', 'Wallet not connected!')\n      return\n    }\n    setLoading(true)\n\n    let signature: TransactionSignature = ''\n    try {\n      let dataLayout = struct([u8('instruction'), nu64('lamports')])\n      const data = Buffer.alloc(dataLayout.span)\n      dataLayout.encode(\n        {\n          instruction: 3,\n          lamports: getCollateralAsNumber(amount) * LAMPORTS_PER_SOL,\n        },\n        data\n      )\n\n      const kongATA = await findAssociatedTokenAddress(publicKey, KONG_MINT)\n      const kongMintAuthority = await PublicKey.findProgramAddress(\n        [\n          PROGRAM_STATE_ACCOUNT.toBuffer(),\n          Buffer.from(KONG_MINT_AUTHORITY_SEED),\n        ],\n        RAD_ID\n      )\n\n      const bananaATA = await findAssociatedTokenAddress(publicKey, BANANA_MINT)\n\n      const transactionItems = []\n\n      // check if ataAccountExists\n      const ataAccountInfo = await connection.getAccountInfo(\n        kongATA,\n        'finalized'\n      )\n\n      if (!ataAccountInfo) {\n        let dataLayoutATA = struct([u8('instruction')])\n        const ataData = Buffer.alloc(dataLayoutATA.span)\n        dataLayoutATA.encode(\n          {\n            instruction: 0,\n          },\n          ataData\n        )\n        transactionItems.push(\n          new TransactionInstruction({\n            keys: [\n              { pubkey: publicKey, isSigner: false, isWritable: true },\n              { pubkey: kongATA, isSigner: false, isWritable: true },\n              { pubkey: publicKey, isSigner: false, isWritable: false },\n              {\n                pubkey: KONG_MINT,\n                isSigner: false,\n                isWritable: false,\n              },\n              { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\n              { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n              { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n            ],\n            programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n            data: ataData,\n          })\n        )\n      }\n\n      transactionItems.push(\n        new TransactionInstruction({\n          keys: [\n            {\n              pubkey: PROGRAM_STATE_ACCOUNT,\n              isSigner: false,\n              isWritable: false,\n            },\n            { pubkey: bananaATA, isSigner: false, isWritable: true },\n            { pubkey: kongATA, isSigner: false, isWritable: true },\n            { pubkey: BANANA_MINT, isSigner: false, isWritable: true },\n            {\n              pubkey: publicKey,\n              isSigner: true,\n              isWritable: false,\n            },\n            { pubkey: KONG_MINT, isSigner: false, isWritable: true },\n            {\n              pubkey: kongMintAuthority[0],\n              isSigner: false,\n              isWritable: false,\n            },\n            { pubkey: KONG_ORACLE_PRODUCT, isSigner: false, isWritable: false },\n            { pubkey: KONG_ORACLE_PRICE, isSigner: false, isWritable: false },\n            { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n          ],\n          programId: RAD_ID,\n          data,\n        })\n      )\n\n      const walletBalance = await connection.getTokenAccountBalance(bananaATA)\n      const walletBalanceBananas = walletBalance.value.uiAmount\n      if (\n        walletBalanceBananas &&\n        walletBalanceBananas <= getCollateralAsNumber(amount)\n      ) {\n        throw Error(\n          `Insufficient wallet balance of ${walletBalanceBananas.toFixed(\n            5\n          )} Bananas for transaction of ${amount} Bananas.`\n        )\n      }\n\n      notify('info', 'Burn Request Approval Needed')\n      const signers: Signer[] = []\n\n      signature = await sendTransaction(\n        new Transaction().add(...transactionItems),\n        connection,\n        {\n          signers: signers,\n        }\n      )\n      notify('info', 'Transaction sent:', signature)\n      dispatch(setArbTransactionSignature(signature))\n\n      await connection.confirmTransaction(signature, 'processed')\n      notify('success', 'Transaction successful!', signature)\n      setLoading(false)\n      setAmount('')\n    } catch (error: any) {\n      setLoading(false)\n      dispatch(setArbTransactionSignature())\n      notify('error', `Transaction failed! ${error?.message}`, signature)\n      return\n    }\n  }, [dispatch, amount, connection, notify, publicKey, sendTransaction])\n\n  const arbitrageKong = useCallback(async () => {\n    if (!publicKey) {\n      notify('error', 'Wallet not connected!')\n      return\n    }\n    setLoading(true)\n\n    let signature: TransactionSignature = ''\n    try {\n      let dataLayout = struct([u8('instruction'), nu64('lamports')])\n      const data = Buffer.alloc(dataLayout.span)\n      dataLayout.encode(\n        {\n          instruction: 2,\n          lamports: getCollateralAsNumber(amount) * LAMPORTS_PER_SOL,\n        },\n        data\n      )\n\n      const kongATA = await findAssociatedTokenAddress(publicKey, KONG_MINT)\n\n      const bananaATA = await findAssociatedTokenAddress(publicKey, BANANA_MINT)\n      const bananaMintAuthority = await PublicKey.findProgramAddress(\n        [\n          PROGRAM_STATE_ACCOUNT.toBuffer(),\n          Buffer.from(BANANA_MINT_AUTHORITY_SEED),\n        ],\n        RAD_ID\n      )\n\n      const transactionItems = []\n\n      // check if ataAccountExists\n      const ataAccountInfo = await connection.getAccountInfo(\n        bananaATA,\n        'finalized'\n      )\n\n      if (!ataAccountInfo) {\n        let dataLayoutATA = struct([u8('instruction')])\n        const ataData = Buffer.alloc(dataLayoutATA.span)\n        dataLayoutATA.encode(\n          {\n            instruction: 0,\n          },\n          ataData\n        )\n        transactionItems.push(\n          new TransactionInstruction({\n            keys: [\n              { pubkey: publicKey, isSigner: false, isWritable: true },\n              { pubkey: bananaATA, isSigner: false, isWritable: true },\n              { pubkey: publicKey, isSigner: false, isWritable: false },\n              {\n                pubkey: BANANA_MINT,\n                isSigner: false,\n                isWritable: false,\n              },\n              { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\n              { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n              { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n            ],\n            programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n            data: ataData,\n          })\n        )\n      }\n\n      transactionItems.push(\n        new TransactionInstruction({\n          keys: [\n            {\n              pubkey: PROGRAM_STATE_ACCOUNT,\n              isSigner: false,\n              isWritable: false,\n            },\n            { pubkey: kongATA, isSigner: false, isWritable: true },\n            { pubkey: bananaATA, isSigner: false, isWritable: true },\n            { pubkey: KONG_MINT, isSigner: false, isWritable: true },\n            {\n              pubkey: publicKey,\n              isSigner: true,\n              isWritable: false,\n            },\n            { pubkey: BANANA_MINT, isSigner: false, isWritable: true },\n            {\n              pubkey: bananaMintAuthority[0],\n              isSigner: false,\n              isWritable: false,\n            },\n            { pubkey: KONG_ORACLE_PRODUCT, isSigner: false, isWritable: false },\n            { pubkey: KONG_ORACLE_PRICE, isSigner: false, isWritable: false },\n            { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n          ],\n          programId: RAD_ID,\n          data,\n        })\n      )\n\n      const walletBalance = await connection.getTokenAccountBalance(kongATA)\n      const walletBalanceKONG = walletBalance.value.uiAmount\n      if (\n        walletBalanceKONG &&\n        walletBalanceKONG <= getCollateralAsNumber(amount)\n      ) {\n        throw Error(\n          `Insufficient wallet balance of ${walletBalanceKONG.toFixed(\n            5\n          )} Kong for transaction of ${amount} Kong.`\n        )\n      }\n\n      notify('info', 'Burn Request Approval Needed')\n      const signers: Signer[] = []\n\n      signature = await sendTransaction(\n        new Transaction().add(...transactionItems),\n        connection,\n        {\n          signers: signers,\n        }\n      )\n      notify('info', 'Transaction sent:', signature)\n      dispatch(setArbTransactionSignature(signature))\n\n      await connection.confirmTransaction(signature, 'processed')\n      notify('success', 'Transaction successful!', signature)\n      setLoading(false)\n      setAmount('')\n    } catch (error: any) {\n      setLoading(false)\n      dispatch(setArbTransactionSignature())\n      notify('error', `Transaction failed! ${error?.message}`, signature)\n      return\n    }\n  }, [dispatch, amount, connection, notify, publicKey, sendTransaction])\n\n  if (arbToken === 'BANANA') {\n    return (\n      <div className=\"Arbitrage-outter-container\">\n        <div className=\"Arbitrage-container\">\n          <Typography\n            id=\"modal-modal-title\"\n            variant=\"h6\"\n            component=\"h2\"\n            align={'center'}\n            color={'white'}\n          >\n            BANANA / KONG\n          </Typography>\n          <br />\n          <CssTextField\n            variant=\"outlined\"\n            autoFocus={true}\n            fullWidth={true}\n            type={'text'}\n            value={amount}\n            onChange={handleSetAmount.bind(this)}\n            label=\"Bananas to Burn for Kong\"\n            id=\"banana-amount\"\n          />\n          <br />\n          <br />\n          <Button\n            variant={'contained'}\n            color={'warning'}\n            onClick={changeArbDirection}\n            className=\"Arb-change-direction-button\"\n          >\n            Change Burn Direction\n          </Button>\n          <br />\n          <br />\n          <ArbBananasEstimate amount={amount} />\n          <br />\n          <br />\n          <Box sx={{ flexGrow: 1 }}>\n            <Grid container spacing={2}>\n              <Grid item xs={10}>\n                <Typography\n                  id=\"modal-modal-title\"\n                  variant=\"caption\"\n                  component=\"h2\"\n                  align={'left'}\n                  color={'white'}\n                >\n                  Slippage Tolerance\n                  <Tooltip\n                    title=\"The maximum difference between your estimated price and execution price.\"\n                    placement=\"right\"\n                  >\n                    <HelpOutlineIcon\n                      style={{\n                        position: 'relative',\n                        marginLeft: '2px',\n                        top: '5px',\n                      }}\n                      fontSize=\"small\"\n                      color={'primary'}\n                    />\n                  </Tooltip>\n                </Typography>\n              </Grid>\n              <Grid item xs={2}>\n                <Typography\n                  id=\"modal-modal-title\"\n                  variant=\"caption\"\n                  component=\"h2\"\n                  align={'right'}\n                  color={'white'}\n                  style={{ position: 'relative', top: '5px' }}\n                >\n                  0.5%\n                </Typography>\n              </Grid>\n            </Grid>\n          </Box>\n          <br />\n          {loading ? (\n            <Box sx={{ flexGrow: 1 }}>\n              <Grid container spacing={2}>\n                <Grid item xs={7}>\n                  <CircularProgress color=\"success\" />\n                </Grid>\n                <Grid item xs={5}>\n                  {arbTransactionSignature && (\n                    <Link\n                      className={styles.link}\n                      href={`https://explorer.solana.com/tx/${arbTransactionSignature}?cluster=${WALLET_ADAPTER_NETWORK}`}\n                      target=\"_blank\"\n                      align=\"right\"\n                    >\n                      Transaction\n                      <LaunchIcon className={styles.icon} />\n                    </Link>\n                  )}\n                </Grid>\n              </Grid>\n            </Box>\n          ) : (\n            <>\n              <Button onClick={arbitrageBananas} variant={'contained'}>\n                Burn Bananas for Kong\n              </Button>\n            </>\n          )}\n          <br />\n          <br />\n        </div>\n      </div>\n    )\n  } else {\n    return (\n      <div className=\"Arbitrage-outter-container\">\n        <div className=\"Arbitrage-container\">\n          <Typography\n            id=\"modal-modal-title\"\n            variant=\"h6\"\n            component=\"h2\"\n            align={'center'}\n            color={'white'}\n          >\n            KONG / BANANA\n          </Typography>\n          <br />\n          <CssTextField\n            variant=\"outlined\"\n            autoFocus={true}\n            fullWidth={true}\n            type={'text'}\n            value={amount}\n            onChange={handleSetAmount.bind(this)}\n            label=\"Kong to Burn for Bananas\"\n            id=\"kong-amount\"\n          />\n          <br />\n          <br />\n          <Button\n            variant={'contained'}\n            color={'warning'}\n            onClick={changeArbDirection}\n            className=\"Arb-change-direction-button\"\n          >\n            Change Burn Direction\n          </Button>\n          <br />\n          <br />\n          <ArbKongEstimate amount={amount} />\n          <br />\n          <br />\n          <Box sx={{ flexGrow: 1 }}>\n            <Grid container spacing={2}>\n              <Grid item xs={10}>\n                <Typography\n                  id=\"modal-modal-title\"\n                  variant=\"caption\"\n                  component=\"h2\"\n                  align={'left'}\n                  color={'white'}\n                >\n                  Slippage Tolerance\n                  <Tooltip\n                    title=\"The maximum difference between your estimated price and execution price.\"\n                    placement=\"right\"\n                  >\n                    <HelpOutlineIcon\n                      style={{\n                        position: 'relative',\n                        marginLeft: '2px',\n                        top: '5px',\n                      }}\n                      fontSize=\"small\"\n                      color={'primary'}\n                    />\n                  </Tooltip>\n                </Typography>\n              </Grid>\n              <Grid item xs={2}>\n                <Typography\n                  id=\"modal-modal-title\"\n                  variant=\"caption\"\n                  component=\"h2\"\n                  align={'right'}\n                  color={'white'}\n                  style={{ position: 'relative', top: '5px' }}\n                >\n                  0.5%\n                </Typography>\n              </Grid>\n            </Grid>\n          </Box>\n          <br />\n          {loading ? (\n            <Box sx={{ flexGrow: 1 }}>\n              <Grid container spacing={2}>\n                <Grid item xs={7}>\n                  <CircularProgress color=\"success\" />\n                </Grid>\n                <Grid item xs={5}>\n                  {arbTransactionSignature && (\n                    <Link\n                      className={styles.link}\n                      href={`https://explorer.solana.com/tx/${arbTransactionSignature}?cluster=${WALLET_ADAPTER_NETWORK}`}\n                      target=\"_blank\"\n                      align=\"right\"\n                    >\n                      Transaction\n                      <LaunchIcon className={styles.icon} />\n                    </Link>\n                  )}\n                </Grid>\n              </Grid>\n            </Box>\n          ) : (\n            <>\n              <Button onClick={arbitrageKong} variant={'contained'}>\n                Burn Kong for Bananas\n              </Button>\n            </>\n          )}\n          <br />\n          <br />\n        </div>\n      </div>\n    )\n  }\n}\n","import { FC } from 'react'\nimport { useSelector } from 'react-redux'\nimport { getOraclePrices } from '../../redux/modules/app'\nimport { calculateArbAmount, getCollateralAsNumber } from '../../utils/helpers'\nimport { CssTextField } from '../OpenLoan/OpenLoan'\n\ninterface propsState {\n  amount: string\n}\n\nexport const ArbBananasEstimate: FC<propsState> = (props) => {\n  const oraclePrices = useSelector(getOraclePrices)\n\n  return (\n    <CssTextField\n      variant=\"outlined\"\n      fullWidth={true}\n      type={'text'}\n      label=\"Est. KONG Received\"\n      id=\"loan-amount\"\n      value={calculateArbAmount(\n        getCollateralAsNumber(props.amount),\n        oraclePrices.KONG_USD,\n        'BANANA'\n      )}\n    />\n  )\n}\n","import { FC } from 'react'\nimport { useSelector } from 'react-redux'\nimport { getOraclePrices } from '../../redux/modules/app'\nimport { calculateLoanAmount, getCollateralAsNumber } from '../../utils/helpers'\nimport { CssTextField } from '../OpenLoan/OpenLoan'\n\ninterface propsState {\n  collateral: string\n}\n\nexport const LoanAmountEstimate: FC<propsState> = (props) => {\n  const oraclePrices = useSelector(getOraclePrices)\n\n  return (\n    <CssTextField\n      variant=\"outlined\"\n      fullWidth={true}\n      type={'text'}\n      label=\"Est. Loan Amount\"\n      id=\"loan-amount\"\n      value={calculateLoanAmount(\n        getCollateralAsNumber(props.collateral),\n        oraclePrices.SOL_USD\n      )}\n    />\n  )\n}\n","import { FC } from 'react'\nimport { useSelector } from 'react-redux'\nimport { getOraclePrices } from '../../redux/modules/app'\nimport {\n  calculateArbAmountKong,\n  getCollateralAsNumber,\n} from '../../utils/helpers'\nimport { CssTextField } from '../OpenLoan/OpenLoan'\n\ninterface propsState {\n  amount: string\n}\n\nexport const ArbKongEstimate: FC<propsState> = (props) => {\n  const oraclePrices = useSelector(getOraclePrices)\n\n  return (\n    <CssTextField\n      variant=\"outlined\"\n      fullWidth={true}\n      type={'text'}\n      label=\"Est. BANANA Received\"\n      id=\"loan-amount\"\n      value={calculateArbAmountKong(\n        getCollateralAsNumber(props.amount),\n        oraclePrices.KONG_USD,\n        'KONG'\n      )}\n    />\n  )\n}\n","import { typedAction } from '../helpers'\nimport { LoansList, LoansState, NotifyFunction } from '../../types'\nimport produce from 'immer'\nimport { RootState } from '..'\nimport { PublicKey } from '@solana/web3.js'\nimport { LOAN_LIST_SCANNER_TIMEOUT } from '../../utils/constants'\n\nconst initialState: LoansState = {\n  notify: null,\n  list: [],\n  openLoanTransactionSignature: null,\n  walletKey: null,\n  scan: false,\n  scanStartTime: null,\n  scanTimer: null,\n  openLoanModal: false,\n}\n\n// DISPATCHES\nexport const setLoansList = (\n  loans: LoansList[] | null,\n  walletKey: PublicKey | null\n) => {\n  return typedAction('loans/SET_LOAN_LIST', {\n    loans: loans,\n    walletKey: walletKey,\n  })\n}\n\nexport const setOpenLoanTransactionSignature = (\n  openLoanTransactionSignature: string | null\n) => {\n  return typedAction('loans/SET_OPEN_LOAN_TRANSACTION_SIGNATURE', {\n    openLoanTransactionSignature: openLoanTransactionSignature,\n  })\n}\n\nexport const setNotifier = (notify: NotifyFunction) => {\n  return typedAction('loans/SET_NOTIFIER', {\n    notify: notify,\n  })\n}\n\nexport const setScanForNewLoans = (scan: boolean) => {\n  return typedAction('loans/SET_LOAN_SCAN', {\n    scan: scan,\n  })\n}\n\nexport const setScanTimer = (\n  startTime: number | null,\n  scanTimer: NodeJS.Timer | null\n) => {\n  return typedAction('loans/SET_LOAN_SCAN_TIMER', {\n    scanStartTime: startTime,\n    scanTimer: scanTimer,\n  })\n}\n\nexport const checkTimeout = () => {\n  return typedAction('loans/CHECK_LOAN_SCAN_TIMEOUT')\n}\n\nexport const setOpenLoanModal = (open: boolean) => {\n  return typedAction('loans/SET_OPEN_LOAN_MODAL', {\n    openLoanModal: open,\n  })\n}\n\ntype LoansAction = ReturnType<\n  | typeof setLoansList\n  | typeof setScanForNewLoans\n  | typeof setScanTimer\n  | typeof checkTimeout\n  | typeof setNotifier\n  | typeof setOpenLoanModal\n  | typeof setOpenLoanTransactionSignature\n>\n\n// REDUCER\nexport function loansReducer(\n  state: LoansState = initialState,\n  action: LoansAction\n): LoansState {\n  switch (action.type) {\n    case 'loans/SET_LOAN_LIST':\n      return produce(state, (draftState: LoansState) => {\n        draftState.list = action.payload.loans\n        draftState.walletKey = action.payload.walletKey\n        draftState.scan = false\n        if (draftState.scanTimer) {\n          clearInterval(draftState.scanTimer)\n          draftState.scanStartTime = null\n          draftState.scanTimer = null\n        }\n      })\n    case 'loans/SET_OPEN_LOAN_TRANSACTION_SIGNATURE':\n      return produce(state, (draftState: LoansState) => {\n        draftState.openLoanTransactionSignature =\n          action.payload.openLoanTransactionSignature\n      })\n    case 'loans/SET_NOTIFIER':\n      return produce(state, (draftState: LoansState) => {\n        draftState.notify = action.payload.notify\n      })\n    case 'loans/CHECK_LOAN_SCAN_TIMEOUT':\n      return produce(state, (draftState: LoansState) => {\n        const currentTime = new Date().getTime()\n        if (\n          draftState.scanTimer &&\n          draftState.scanStartTime &&\n          currentTime - draftState.scanStartTime >\n            LOAN_LIST_SCANNER_TIMEOUT * 1000\n        ) {\n          draftState.notify &&\n            draftState.notify(\n              'warning',\n              'Timeout of ' +\n                LOAN_LIST_SCANNER_TIMEOUT +\n                ' Seconds Reached for Loan List Refresh'\n            )\n          clearInterval(draftState.scanTimer)\n          draftState.scanStartTime = null\n          draftState.scanTimer = null\n          draftState.scan = false\n        }\n      })\n    case 'loans/SET_LOAN_SCAN':\n      return produce(state, (draftState: LoansState) => {\n        draftState.scan = action.payload.scan\n      })\n    case 'loans/SET_LOAN_SCAN_TIMER':\n      return produce(state, (draftState: LoansState) => {\n        // CLEAR INTERVAL IF SETTING TO NULL\n        if (draftState.scanTimer && action.payload.scanTimer === null) {\n          clearInterval(draftState.scanTimer)\n        }\n        draftState.scanStartTime = action.payload.scanStartTime\n        draftState.scanTimer = action.payload.scanTimer\n      })\n    case 'loans/SET_OPEN_LOAN_MODAL':\n      return produce(state, (draftState: LoansState) => {\n        draftState.openLoanModal = action.payload.openLoanModal\n      })\n    default:\n      return state\n  }\n}\n\n// SELECTORS\nexport const getLoans = (state: RootState) => state.loans\nexport const getOpenLoanModal = (state: RootState) => state.loans.openLoanModal\nexport const getOpenLoanTransactionSignature = (state: RootState) =>\n  state.loans.openLoanTransactionSignature\n","import { PriceData } from '@pythnetwork/client'\nimport { ArbToken } from '../types'\n\nexport function numberWithCommas(num: number): string {\n  return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n}\n\nexport function getCollateralAsNumber(collateral: string): number {\n  if (parseFloat(collateral)) {\n    return parseFloat(collateral)\n  } else {\n    return 0\n  }\n}\n\nexport function validNumericTrailingCharCheck(text: string) {\n  const filtered = text.replaceAll(/[^0-9.]/g, '')\n  if (filtered.slice(0, -1).match(/\\./) && filtered.slice(-1) === '.') {\n    // trailing period when a period is already in the text\n    return filtered.slice(0, -1)\n  } else {\n    return filtered\n  }\n}\n\nexport function calculateLoanAmount(\n  collateral: number,\n  solPrice: PriceData | null\n): string {\n  if (collateral > 0 && solPrice) {\n    const depositValue = solPrice.price * collateral\n    const loanEst = parseFloat((depositValue / 1.5).toFixed(5))\n    const internationalNumberFormat = new Intl.NumberFormat('en-US')\n    return (\n      internationalNumberFormat.format(collateral).toString() +\n      ' * ' +\n      ' $' +\n      internationalNumberFormat.format(solPrice.price).toString() +\n      ' / 1.5 = ' +\n      internationalNumberFormat.format(loanEst).toString()\n    )\n  } else {\n    return '0'\n  }\n}\n\nexport function calculateArbAmount(\n  amount: number,\n  priceData: PriceData | null,\n  arbToken: ArbToken\n): string {\n  if (amount > 0 && priceData) {\n    const swapEstimate = parseFloat((amount / priceData.price).toFixed(5))\n    const internationalNumberFormat = new Intl.NumberFormat('en-US')\n    return (\n      internationalNumberFormat.format(amount).toString() +\n      ' ' +\n      arbToken +\n      ' ' +\n      ' / ' +\n      ' $' +\n      internationalNumberFormat.format(priceData.price).toString() +\n      ' = ' +\n      internationalNumberFormat.format(swapEstimate).toString()\n    )\n  } else {\n    return '0'\n  }\n}\n\nexport function calculateArbAmountKong(\n  amount: number,\n  priceData: PriceData | null,\n  arbToken: ArbToken\n): string {\n  if (amount > 0 && priceData) {\n    const swapEstimate = parseFloat((amount * priceData.price).toFixed(5))\n    const internationalNumberFormat = new Intl.NumberFormat('en-US')\n    return (\n      internationalNumberFormat.format(amount).toString() +\n      ' ' +\n      arbToken +\n      ' ' +\n      ' * ' +\n      ' $' +\n      internationalNumberFormat.format(priceData.price).toString() +\n      ' = ' +\n      internationalNumberFormat.format(swapEstimate).toString()\n    )\n  } else {\n    return '0'\n  }\n}\n","export function typedAction<T extends string>(type: T): { type: T }\n\n// tslint:disable-next-line: no-any\nexport function typedAction<T extends string, P extends any>(\n  type: T,\n  payload: P\n): { type: T; payload: P }\n\n// tslint:disable-next-line: no-any\nexport function typedAction(type: string, payload?: any) {\n  return { type, payload }\n}\n","import { FC } from 'react'\nimport {\n  WalletModalProvider,\n  WalletMultiButton,\n} from '@solana/wallet-adapter-react-ui'\nimport { useWallet } from '@solana/wallet-adapter-react'\n\nexport const Wallet: FC = () => {\n  const { publicKey } = useWallet()\n\n  return (\n    <WalletModalProvider featuredWallets={4} logo={'/Bananas-90px.png'}>\n      <WalletMultiButton\n        children={publicKey ? null : 'Connect Wallet'}\n        className=\"Connect-wallet-button\"\n      />\n    </WalletModalProvider>\n  )\n}\n","import { FC } from 'react'\nimport Toolbar from '@mui/material/Toolbar'\nimport { AppBar, Box, Grid } from '@mui/material'\nimport { Wallet } from '../Wallet/Wallet'\nimport { NAV_BAR_SCREEN_MIN_WIDTH_FOR_WALLET_BUTTON } from '../../utils/constants'\nimport { useSelector } from 'react-redux'\nimport { getScreen } from '../../redux/modules/app'\n\nexport const NavBar: FC = () => {\n  const { windowWidth } = useSelector(getScreen)\n  const smallScreen = windowWidth < NAV_BAR_SCREEN_MIN_WIDTH_FOR_WALLET_BUTTON\n\n  return (\n    <AppBar position=\"static\" className=\"App-bar\">\n      <Toolbar variant=\"regular\">\n        <Box sx={{ flexGrow: 1 }}>\n          <Grid container spacing={2}>\n            <Grid item xs={smallScreen ? 6 : 9}>\n              <img src=\"/kong-logo.png\" alt=\"Kong\" className={'App-logo'} />\n            </Grid>\n            {smallScreen ? (\n              <Grid item xs={6}>\n                <div style={{ textAlign: 'right' }}>\n                  <Wallet />\n                </div>\n              </Grid>\n            ) : (\n              <Grid item xs={3}>\n                <div style={{ textAlign: 'right' }}>\n                  <Wallet />\n                </div>\n              </Grid>\n            )}\n          </Grid>\n        </Box>\n      </Toolbar>\n    </AppBar>\n  )\n}\n","import * as React from 'react'\nimport { createTheme, ThemeProvider } from '@mui/material/styles'\nimport AppBar from '@mui/material/AppBar'\nimport Tabs from '@mui/material/Tabs'\nimport Tab from '@mui/material/Tab'\nimport Box from '@mui/material/Box'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getSelectedTab, setTab } from '../../redux/modules/app'\n\nfunction a11yProps(index: number) {\n  return {\n    id: `full-width-tab-${index}`,\n    'aria-controls': `full-width-tabpanel-${index}`,\n  }\n}\n\nexport default function FullWidthTabs() {\n  const dispatch = useDispatch()\n  const selectedTab = useSelector(getSelectedTab)\n\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    dispatch(setTab(newValue))\n  }\n\n  const theme = createTheme({\n    components: {\n      MuiAppBar: {\n        styleOverrides: {\n          root: {\n            backgroundColor: 'transparent',\n          },\n        },\n      },\n      MuiTabs: {\n        styleOverrides: {\n          indicator: {\n            backgroundColor: 'yellow',\n          },\n        },\n      },\n    },\n  })\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Box sx={{ width: '100%' }}>\n        <AppBar position=\"static\">\n          <Tabs\n            value={selectedTab}\n            onChange={handleChange}\n            indicatorColor=\"secondary\"\n            textColor=\"inherit\"\n            variant=\"fullWidth\"\n            aria-label=\"full width tabs example\"\n          >\n            <Tab label=\"LOANS\" {...a11yProps(0)} />\n            <Tab label=\"ARBITRAGE\" {...a11yProps(1)} />\n          </Tabs>\n        </AppBar>\n      </Box>\n    </ThemeProvider>\n  )\n}\n","import { FC } from 'react'\nimport { useWallet } from '@solana/wallet-adapter-react'\nimport { Grid, Paper, styled } from '@mui/material'\nimport { Wallet } from '../Wallet/Wallet'\nimport { LoanList } from '../LoanList/LoanList'\nimport { useSelector } from 'react-redux'\nimport { getSelectedTab } from '../../redux/modules/app'\nimport Tabs from './Tabs'\nimport { Arbitrage } from '../Arbitrage/Arbitrage'\n\ninterface TabPanelProps {\n  children?: React.ReactNode\n  dir?: string\n  index: number\n  value: number\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`full-width-tabpanel-${index}`}\n      aria-labelledby={`full-width-tab-${index}`}\n      {...other}\n    >\n      <br />\n      {value === index && children}\n    </div>\n  )\n}\n\nexport const MainBox: FC = () => {\n  const { publicKey } = useWallet()\n  const selectedTab = useSelector(getSelectedTab)\n\n  const Item = styled(Paper)(({ theme }) => ({\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  }))\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      columns={16}\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <Grid item xs={12}>\n        <Item className={'App-center-box'}>\n          {publicKey ? (\n            <div>\n              <Tabs />\n              <TabPanel value={selectedTab} index={0}>\n                <LoanList />\n              </TabPanel>\n              <TabPanel value={selectedTab} index={1}>\n                <Arbitrage />\n              </TabPanel>\n            </div>\n          ) : (\n            <div className=\"Wallet-button-div-middle\">\n              <Wallet />\n            </div>\n          )}\n        </Item>\n      </Grid>\n    </Grid>\n  )\n}\n","import './OraclePrices.css'\nimport { FC, useEffect, useMemo, useRef } from 'react'\nimport { Grid, Typography } from '@mui/material'\nimport {\n  AccountType,\n  getPythProgramKeyForCluster,\n  parseBaseData,\n  parsePriceData,\n  parseProductData,\n  PriceData,\n  Product,\n} from '@pythnetwork/client'\nimport { PYTH_SOLANA_CLUSTER_NAME } from '../../utils/constants'\nimport {\n  AccountInfo,\n  clusterApiUrl,\n  Connection,\n  PublicKey,\n} from '@solana/web3.js'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  getOraclePrices,\n  setOraclePrices,\n  setOracleTimer,\n} from '../../redux/modules/app'\n\nexport const OraclePrices: FC = () => {\n  const oraclePrices = useSelector(getOraclePrices)\n  const dispatch = useDispatch()\n  const componentIsMounted = useRef(true)\n\n  const connection = useMemo(\n    () => new Connection(clusterApiUrl(PYTH_SOLANA_CLUSTER_NAME)),\n    []\n  )\n\n  const pythPublicKey = getPythProgramKeyForCluster(PYTH_SOLANA_CLUSTER_NAME)\n\n  useEffect(() => {\n    return () => {\n      componentIsMounted.current = false\n      dispatch(setOracleTimer(null))\n    }\n  }, [dispatch])\n\n  useEffect(() => {\n    async function getPrices() {\n      const accounts = await connection.getProgramAccounts(\n        pythPublicKey,\n        'finalized'\n      )\n      let productAccountKeyToProduct: Record<string, Product> = {}\n      let priceAccountKeyToProductAccountKey: Record<string, string> = {}\n      let marketToPriceData: Record<string, PriceData> = {}\n\n      function handleAccounts(\n        accounts: {\n          pubkey: PublicKey\n          account: AccountInfo<Buffer>\n        }[],\n        productOnly: boolean\n      ) {\n        for (const account of accounts) {\n          const base = parseBaseData(account.account.data)\n          if (base) {\n            switch (AccountType[base.type]) {\n              case 'Mapping':\n                break\n              case 'Product':\n                if (productOnly) {\n                  const { priceAccountKey, product } = parseProductData(\n                    account.account.data\n                  )\n                  productAccountKeyToProduct[account.pubkey.toString()] =\n                    product\n                  if (\n                    priceAccountKey.toString() !==\n                    '11111111111111111111111111111111'\n                  ) {\n                    priceAccountKeyToProductAccountKey[\n                      priceAccountKey.toString()\n                    ] = account.pubkey.toString()\n                  }\n                }\n                break\n              case 'Price':\n                if (!productOnly) {\n                  const productLookup =\n                    productAccountKeyToProduct[\n                      priceAccountKeyToProductAccountKey[\n                        account.pubkey.toString()\n                      ]\n                    ]\n                  if (productLookup) {\n                    const priceData = parsePriceData(account.account.data)\n                    marketToPriceData[productLookup.symbol] = priceData\n                  }\n                }\n                break\n              case 'Test':\n                break\n              default:\n                throw new Error(\n                  `Unknown account type: ${base.type}. Try upgrading pyth-client.`\n                )\n            }\n          }\n        }\n      }\n\n      marketToPriceData = {}\n      handleAccounts(accounts, true)\n      handleAccounts(accounts, false)\n\n      if (marketToPriceData) {\n        dispatch(\n          setOraclePrices({\n            SOL_USD: marketToPriceData['SOL/USD'],\n            BANANA_USD: marketToPriceData['USDC/USD'],\n            KONG_USD: marketToPriceData['ETH/USD'],\n          })\n        )\n      }\n    }\n\n    if (!oraclePrices.timer) {\n      if (!oraclePrices.SOL_USD) {\n        getPrices()\n      }\n      dispatch(setOracleTimer(setInterval(() => getPrices(), 5000)))\n    }\n  })\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={4}>\n        <Typography component=\"div\" className=\"Oracle-price-text\">\n          BANANA/USD\n          <br />\n          {oraclePrices.BANANA_USD\n            ? '$' + oraclePrices.BANANA_USD?.price.toFixed(2)\n            : ''}\n        </Typography>\n      </Grid>\n      <Grid item xs={4}>\n        <Typography component=\"div\" className=\"Oracle-price-text\">\n          SOL/USD\n          <br />\n          {oraclePrices.SOL_USD\n            ? '$' + oraclePrices.SOL_USD?.price.toFixed(2)\n            : 'Loading ...'}\n        </Typography>\n      </Grid>\n      <Grid item xs={4}>\n        <Typography component=\"div\" className=\"Oracle-price-text\">\n          KONG/USD\n          <br />\n          {oraclePrices.KONG_USD\n            ? '$' + oraclePrices.KONG_USD?.price.toFixed(2)\n            : ''}\n        </Typography>\n      </Grid>\n    </Grid>\n  )\n}\n","import './BottomBar.css'\nimport { FC } from 'react'\nimport Paper from '@mui/material/Paper'\nimport { Box, Divider, Toolbar, Typography } from '@mui/material'\nimport { OraclePrices } from '../OraclePrices/OraclePrices'\n\nexport const BottomBar: FC = () => {\n  return (\n    <>\n      <div className=\"Bottom-spacer-hidden\" />\n      <Paper elevation={3} className=\"Bottom-bar\">\n        <Divider orientation=\"horizontal\" flexItem className={'App-divider'} />\n        <Toolbar variant=\"regular\">\n          <Box sx={{ flexGrow: 1 }}>\n            <OraclePrices />\n          </Box>\n        </Toolbar>\n        <Toolbar className=\"Bottom-bar-notification\" variant=\"regular\">\n          <Box sx={{ flexGrow: 1 }}>\n            <Typography\n              component=\"div\"\n              className=\"Bottom-bar-notification-text\"\n            >\n              THIS IS RUNNING ON DEVNET\n              <br />\n            </Typography>\n          </Box>\n        </Toolbar>\n      </Paper>\n    </>\n  )\n}\n","import './Home.css'\nimport { FC, useMemo } from 'react'\nimport { WALLET_ADAPTER_NETWORK } from '../../utils/wallet-config'\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from '@solana/wallet-adapter-react'\nimport {\n  getLedgerWallet,\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletExtensionWallet,\n  getSolletWallet,\n} from '@solana/wallet-adapter-wallets'\nimport { NavBar } from '../NavBar/NavBar'\nimport { Divider } from '@mui/material'\nimport { MainBox } from '../MainBox/MainBox'\nimport { clusterApiUrl } from '@solana/web3.js'\nimport { OpenLoan } from '../OpenLoan/OpenLoan'\nimport { WalletError } from '@solana/wallet-adapter-base'\nimport { useNotify } from '../../utils/notify'\nimport { BottomBar } from '../BottomBar/BottomBar'\n\nexport const Home: FC = () => {\n  const notify = useNotify()\n\n  const network = WALLET_ADAPTER_NETWORK\n\n  // You can also provide a custom RPC endpoint\n  const endpoint = useMemo(() => clusterApiUrl(network), [network])\n\n  // const endpoint = 'http://localhost:8899/'\n\n  // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\n  // Only the wallets you configure here will be compiled into your application\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSlopeWallet(),\n      getSolflareWallet(),\n      getLedgerWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    [network]\n  )\n\n  function handleWalletError(e: WalletError) {\n    notify('error', `Wallet Error: ${e.message}`)\n  }\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider\n        onError={(e: WalletError) => handleWalletError(e)}\n        wallets={wallets}\n        autoConnect\n      >\n        <NavBar />\n        <Divider orientation=\"horizontal\" flexItem className={'App-divider'} />\n        <OpenLoan />\n        <p>\n          <br />\n        </p>\n        <MainBox />\n        <BottomBar />\n      </WalletProvider>\n    </ConnectionProvider>\n  )\n}\n","import './App.css'\nimport { SnackbarProvider } from 'notistack'\nimport { Home } from '../Home/Home'\nimport { FC, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { setScreen } from '../../redux/modules/app'\n\nexport const App: FC = () => {\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    const handler = () => {\n      dispatch(\n        setScreen({\n          windowWidth: window.innerWidth,\n          windowHeight: window.innerHeight,\n        })\n      )\n    }\n\n    // Set size at the first client-side load\n    handler()\n\n    window.addEventListener('resize', handler)\n\n    // Remove event listener on cleanup\n    return () => {\n      window.removeEventListener('resize', handler)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return (\n    <SnackbarProvider maxSnack={5}>\n      <Home />\n    </SnackbarProvider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux'\nimport { appReducer } from './modules/app'\nimport { loansReducer } from './modules/loans'\n\nexport const rootReducer = combineReducers({\n  app: appReducer,\n  loans: loansReducer,\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './Components/App/App'\nimport reportWebVitals from './reportWebVitals'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport { rootReducer } from './redux'\n\nexport const store = createStore(rootReducer)\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import { Link, makeStyles } from '@material-ui/core'\nimport LaunchIcon from '@material-ui/icons/Launch'\nimport { useSnackbar, VariantType } from 'notistack'\nimport { useCallback } from 'react'\nimport { WALLET_ADAPTER_NETWORK } from './wallet-config'\n\nconst useStyles = makeStyles({\n  notification: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  link: {\n    color: '#ffffff',\n    display: 'flex',\n    alignItems: 'center',\n    marginLeft: 16,\n    textDecoration: 'underline',\n    '&:hover': {\n      color: '#000000',\n    },\n  },\n  icon: {\n    fontSize: 20,\n    marginLeft: 8,\n  },\n})\n\nexport function useNotify() {\n  const styles = useStyles()\n  const { enqueueSnackbar } = useSnackbar()\n\n  return useCallback(\n    (variant: VariantType, message: string, signature?: string) => {\n      enqueueSnackbar(\n        <span className={styles.notification}>\n          {message}\n          {signature && (\n            <Link\n              className={styles.link}\n              href={`https://explorer.solana.com/tx/${signature}?cluster=${WALLET_ADAPTER_NETWORK}`}\n              target=\"_blank\"\n            >\n              Transaction\n              <LaunchIcon className={styles.icon} />\n            </Link>\n          )}\n        </span>,\n        { variant }\n      )\n    },\n    [enqueueSnackbar, styles]\n  )\n}\n","import { WalletAdapterNetwork } from '@solana/wallet-adapter-base'\n\nexport const WALLET_ADAPTER_NETWORK = WalletAdapterNetwork.Devnet\n","import { useConnection, useWallet } from '@solana/wallet-adapter-react'\nimport {\n  Keypair,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  Signer,\n  SystemProgram,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n} from '@solana/web3.js'\nimport { u8, nu64, struct } from '@solana/buffer-layout'\nimport { FC, useCallback, useState } from 'react'\nimport {\n  BANANA_MINT,\n  BANANA_MINT_AUTHORITY_SEED,\n  KONG_LOAN_ACCOUNT_SIZE,\n  MARINADE_STATE_ID,\n  MSOL_LEG,\n  MSOL_LEG_AUTHORITY_INFO,\n  MSOL_MINT,\n  MSOL_MINT_AUTH,\n  PROGRAM_STATE_ACCOUNT,\n  PROGRAM_VAULT_SEED,\n  RAD_ID,\n  RENT_PROGRAM_ID,\n  RESERVE_PDA_INFO,\n  SOLANA_TOKEN_ID,\n  SOL_LEG,\n  SOL_ORACLE_PRICE,\n  SOL_ORACLE_PRODUCT,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  SYSTEM_PROGRAM_ID,\n  MARINADE_PROGRAM_ID,\n} from '../../utils/constants'\nimport { WALLET_ADAPTER_NETWORK } from '../../utils/wallet-config'\nimport LaunchIcon from '@material-ui/icons/Launch'\nimport {\n  Backdrop,\n  Box,\n  Button,\n  Fade,\n  Modal,\n  styled,\n  TextField,\n  Typography,\n  Tooltip,\n  Grid,\n  CircularProgress,\n  Link,\n} from '@mui/material'\nimport { makeStyles } from '@material-ui/core'\nimport ArrowDropDownCircleSharpIcon from '@mui/icons-material/ArrowDropDownCircleSharp'\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useNotify } from '../../utils/notify'\nimport {\n  getOpenLoanModal,\n  getOpenLoanTransactionSignature,\n  setOpenLoanModal,\n  setOpenLoanTransactionSignature,\n  setScanForNewLoans,\n} from '../../redux/modules/loans'\nimport {\n  getCollateralAsNumber,\n  validNumericTrailingCharCheck,\n} from '../../utils/helpers'\nimport { LoanAmountEstimate } from '../LoanAmountEstimate/LoanAmountEstimate'\nimport { WalletSendTransactionError } from '@solana/wallet-adapter-base'\nimport { TOKEN_PROGRAM_ID, Token, AccountLayout } from '@solana/spl-token'\n\nexport const CssTextField = styled(TextField)({\n  '& label.MuiInputLabel': {\n    color: 'white',\n  },\n  '& label.MuiInputLabel-root': {\n    color: 'white',\n  },\n  '& label.Mui-focused': {\n    color: 'white',\n  },\n  '& .MuiInput-underline:after': {\n    borderBottomColor: 'green',\n  },\n  '& .MuiInputBase-root': {\n    color: 'white',\n    backgroundColor: 'transparent',\n  },\n  '& .MuiOutlinedInput-root': {\n    '& fieldset': {\n      borderColor: 'green',\n    },\n    '&:hover fieldset': {\n      borderColor: 'white',\n    },\n    '&.Mui-focused fieldset': {\n      borderColor: 'green',\n    },\n  },\n})\n\nexport const useStyles = makeStyles({\n  link: {\n    color: '#ffffff',\n    display: 'flex',\n    alignItems: 'right',\n    textDecoration: 'underline',\n    '&:hover': {\n      color: '#000000',\n    },\n  },\n  icon: {\n    fontSize: 20,\n  },\n})\n\nasync function findAssociatedTokenAddress(\n  walletAddress: PublicKey,\n  tokenMintAddress: PublicKey\n): Promise<PublicKey> {\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        walletAddress.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        tokenMintAddress.toBuffer(),\n      ],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0]\n}\n\nexport const OpenLoan: FC = () => {\n  const { connection } = useConnection()\n  const { publicKey, sendTransaction } = useWallet()\n  const [collateral, setCollateral] = useState('')\n  const [loading, setLoading] = useState(false)\n  const dispatch = useDispatch()\n  const notify = useNotify()\n  const open = useSelector(getOpenLoanModal)\n  const openLoanTransactionSignature = useSelector(\n    getOpenLoanTransactionSignature\n  )\n  const styles = useStyles()\n\n  const handleClose = useCallback(\n    () => dispatch(setOpenLoanModal(false)),\n    [dispatch]\n  )\n\n  if (!publicKey) {\n    dispatch(setOpenLoanModal(false))\n  }\n\n  const createLoan = useCallback(async () => {\n    if (!publicKey) {\n      notify('error', 'Wallet not connected!')\n      return\n    }\n\n    let signature: TransactionSignature = ''\n    try {\n      setLoading(true)\n      const owner = publicKey\n      const banana_mint_authority = await PublicKey.findProgramAddress(\n        [\n          PROGRAM_STATE_ACCOUNT.toBuffer(),\n          Buffer.from(BANANA_MINT_AUTHORITY_SEED),\n        ],\n        RAD_ID\n      )\n\n      const loan_account = new Keypair()\n\n      const bananaAtaAddress = await findAssociatedTokenAddress(\n        owner,\n        BANANA_MINT\n      )\n\n      const userMSolAtaAddress = await findAssociatedTokenAddress(\n        owner,\n        MSOL_MINT\n      )\n\n      const program_vault_derived_pubKey = await PublicKey.createWithSeed(\n        loan_account.publicKey,\n        PROGRAM_VAULT_SEED,\n        TOKEN_PROGRAM_ID\n      )\n\n      const programVaultAuthority = await PublicKey.findProgramAddress(\n        [\n          loan_account.publicKey.toBuffer(),\n          program_vault_derived_pubKey.toBuffer(),\n        ],\n        RAD_ID\n      )\n\n      const transaction = new Transaction()\n\n      const openLoanTransactionItems = [\n        // create loan account\n        SystemProgram.createAccount({\n          fromPubkey: owner,\n          newAccountPubkey: loan_account.publicKey,\n          lamports: await connection.getMinimumBalanceForRentExemption(\n            KONG_LOAN_ACCOUNT_SIZE\n          ),\n          space: KONG_LOAN_ACCOUNT_SIZE,\n          programId: RAD_ID,\n        }),\n        // CREATE PROGRAM VAULT\n        SystemProgram.createAccountWithSeed({\n          basePubkey: loan_account.publicKey,\n          fromPubkey: owner,\n          newAccountPubkey: program_vault_derived_pubKey,\n          seed: PROGRAM_VAULT_SEED,\n          lamports: await connection.getMinimumBalanceForRentExemption(\n            AccountLayout.span\n          ),\n          space: AccountLayout.span,\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        // initialize program vault as MSOL\n        Token.createInitAccountInstruction(\n          TOKEN_PROGRAM_ID,\n          MSOL_MINT,\n          program_vault_derived_pubKey,\n          programVaultAuthority[0]\n        ),\n      ]\n\n      // check if ataAccountExists\n      const ataAccountInfo = await connection.getAccountInfo(\n        bananaAtaAddress,\n        'finalized'\n      )\n\n      if (!ataAccountInfo) {\n        let dataLayoutATA = struct([u8('instruction')])\n        const ataData = Buffer.alloc(dataLayoutATA.span)\n        dataLayoutATA.encode(\n          {\n            instruction: 0,\n          },\n          ataData\n        )\n        openLoanTransactionItems.push(\n          new TransactionInstruction({\n            keys: [\n              { pubkey: owner, isSigner: false, isWritable: true },\n              { pubkey: bananaAtaAddress, isSigner: false, isWritable: true },\n              { pubkey: owner, isSigner: false, isWritable: false },\n              {\n                pubkey: BANANA_MINT,\n                isSigner: false,\n                isWritable: false,\n              },\n              { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\n              { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n              { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n            ],\n            programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n            data: ataData,\n          })\n        )\n      }\n\n      // check if userMSolAtaAddress exists\n      const userMSolAtaAccountInfo = await connection.getAccountInfo(\n        userMSolAtaAddress,\n        'finalized'\n      )\n\n      if (!userMSolAtaAccountInfo) {\n        let dataLayoutMSolATA = struct([u8('instruction')])\n        const mSolAtaData = Buffer.alloc(dataLayoutMSolATA.span)\n        dataLayoutMSolATA.encode(\n          {\n            instruction: 0,\n          },\n          mSolAtaData\n        )\n        openLoanTransactionItems.push(\n          new TransactionInstruction({\n            keys: [\n              { pubkey: owner, isSigner: false, isWritable: true },\n              { pubkey: userMSolAtaAddress, isSigner: false, isWritable: true },\n              { pubkey: owner, isSigner: false, isWritable: false },\n              {\n                pubkey: MSOL_MINT,\n                isSigner: false,\n                isWritable: false,\n              },\n              { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\n              { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n              { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n            ],\n            programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n            data: mSolAtaData,\n          })\n        )\n      }\n\n      let dataLayout = struct([u8('instruction'), nu64('lamports')])\n      const data = Buffer.alloc(dataLayout.span)\n      dataLayout.encode(\n        {\n          instruction: 0,\n          lamports: getCollateralAsNumber(collateral) * LAMPORTS_PER_SOL,\n        },\n        data\n      )\n      openLoanTransactionItems.push(\n        // send create loan instruction\n        new TransactionInstruction({\n          keys: [\n            {\n              pubkey: PROGRAM_STATE_ACCOUNT,\n              isSigner: false,\n              isWritable: false,\n            },\n            { pubkey: MARINADE_STATE_ID, isSigner: false, isWritable: true },\n            {\n              pubkey: loan_account.publicKey,\n              isSigner: false,\n              isWritable: true,\n            },\n            {\n              pubkey: program_vault_derived_pubKey,\n              isSigner: false,\n              isWritable: true,\n            },\n            { pubkey: BANANA_MINT, isSigner: false, isWritable: true },\n            {\n              pubkey: banana_mint_authority[0],\n              isSigner: false,\n              isWritable: false,\n            },\n            {\n              pubkey: bananaAtaAddress,\n              isSigner: false,\n              isWritable: true,\n            },\n            { pubkey: owner, isSigner: true, isWritable: true },\n            { pubkey: userMSolAtaAddress, isSigner: false, isWritable: true },\n            { pubkey: owner, isSigner: true, isWritable: true },\n            {\n              pubkey: SOL_ORACLE_PRODUCT,\n              isSigner: false,\n              isWritable: false,\n            },\n            { pubkey: SOL_ORACLE_PRICE, isSigner: false, isWritable: false },\n            { pubkey: MSOL_MINT, isSigner: false, isWritable: true },\n            { pubkey: SOL_LEG, isSigner: false, isWritable: true },\n            { pubkey: MSOL_LEG, isSigner: false, isWritable: true },\n            {\n              pubkey: MSOL_LEG_AUTHORITY_INFO,\n              isSigner: false,\n              isWritable: false,\n            },\n            { pubkey: RESERVE_PDA_INFO, isSigner: false, isWritable: true },\n            { pubkey: MSOL_MINT_AUTH, isSigner: false, isWritable: false },\n            { pubkey: SOLANA_TOKEN_ID, isSigner: false, isWritable: false },\n            { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n            {\n              pubkey: MARINADE_PROGRAM_ID,\n              isSigner: false,\n              isWritable: false,\n            },\n          ],\n          programId: RAD_ID,\n          data,\n        })\n      )\n\n      transaction.add(...openLoanTransactionItems)\n\n      const walletBalance = await connection.getBalance(publicKey)\n      const walletBalanceSOL = walletBalance / LAMPORTS_PER_SOL\n      if (walletBalanceSOL <= getCollateralAsNumber(collateral)) {\n        throw Error(\n          `Insufficient wallet balance of ${walletBalanceSOL.toFixed(\n            5\n          )} SOL for transaction of ${collateral} SOL.`\n        )\n      }\n\n      const signers: Signer[] = [loan_account]\n\n      notify('info', 'Open Loan Request Approval Needed')\n      signature = await sendTransaction(transaction, connection, {\n        signers: signers,\n      })\n      notify('info', 'Transaction sent:', signature)\n      dispatch(setOpenLoanTransactionSignature(signature))\n\n      await connection.confirmTransaction(signature, 'finalized')\n\n      notify('success', 'Transaction successful!', signature)\n      dispatch(setScanForNewLoans(true))\n      dispatch(setOpenLoanTransactionSignature(null))\n      handleClose()\n      setLoading(false)\n      setCollateral('')\n    } catch (error: any) {\n      if (error instanceof WalletSendTransactionError) {\n        notify('error', `Transaction failed! ${error?.message}`, signature)\n        setLoading(false)\n        dispatch(setOpenLoanTransactionSignature(null))\n        return\n      } else {\n        notify('error', `Transaction failed! ${error?.message}`, signature)\n        setLoading(false)\n        dispatch(setOpenLoanTransactionSignature(null))\n        return\n      }\n    }\n  }, [\n    publicKey,\n    sendTransaction,\n    connection,\n    collateral,\n    dispatch,\n    notify,\n    handleClose,\n  ])\n\n  function setCollateralAmount(ev: React.ChangeEvent<HTMLInputElement>) {\n    if (validNumericTrailingCharCheck(ev.target.value)) {\n      setCollateral(validNumericTrailingCharCheck(ev.target.value))\n    } else if (ev.target.value === '') {\n      setCollateral('')\n    }\n  }\n\n  return (\n    <Modal\n      aria-labelledby=\"transition-modal-title\"\n      aria-describedby=\"transition-modal-description\"\n      open={open}\n      onClose={handleClose}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n        onClick: undefined,\n      }}\n    >\n      <Fade in={open}>\n        <Box\n          sx={{\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            width: 400,\n            border: '2px solid #000',\n            boxShadow: 24,\n            p: 4,\n          }}\n          className=\"Open-loan-modal\"\n        >\n          <Typography\n            id=\"modal-modal-title\"\n            variant=\"h6\"\n            component=\"h2\"\n            align={'center'}\n            color={'white'}\n          >\n            Open a New Loan\n          </Typography>\n          <br />\n          <CssTextField\n            variant=\"outlined\"\n            autoFocus={true}\n            fullWidth={true}\n            type={'text'}\n            label=\"Collateral Amount in SOL\"\n            id=\"collateral-amount\"\n            value={collateral}\n            onChange={setCollateralAmount.bind(this)}\n          />\n          <br />\n          <br />\n          <div\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              flexWrap: 'wrap',\n            }}\n          >\n            <ArrowDropDownCircleSharpIcon\n              style={{ marginLeft: '45%' }}\n              color=\"primary\"\n              fontSize=\"large\"\n            />\n          </div>\n          <br />\n          <LoanAmountEstimate collateral={collateral} />\n          <br />\n          <br />\n          <Box sx={{ flexGrow: 1 }}>\n            <Grid container spacing={2}>\n              <Grid item xs={10}>\n                <Typography\n                  id=\"modal-modal-title\"\n                  variant=\"caption\"\n                  component=\"h2\"\n                  align={'left'}\n                  color={'white'}\n                >\n                  Slippage Tolerance\n                  <Tooltip\n                    title=\"The maximum difference between your estimated price and execution price.\"\n                    placement=\"right\"\n                  >\n                    <HelpOutlineIcon\n                      style={{\n                        position: 'relative',\n                        marginLeft: '2px',\n                        top: '5px',\n                      }}\n                      fontSize=\"small\"\n                      color={'primary'}\n                    />\n                  </Tooltip>\n                </Typography>\n              </Grid>\n              <Grid item xs={2}>\n                <Typography\n                  id=\"modal-modal-title\"\n                  variant=\"caption\"\n                  component=\"h2\"\n                  align={'right'}\n                  color={'white'}\n                  style={{ position: 'relative', top: '5px' }}\n                >\n                  0.5%\n                </Typography>\n              </Grid>\n            </Grid>\n          </Box>\n          <br />\n          <br />\n          {loading ? (\n            <Box sx={{ flexGrow: 1 }}>\n              <Grid container spacing={2}>\n                <Grid item xs={7}>\n                  <CircularProgress color=\"success\" />\n                </Grid>\n                <Grid item xs={5}>\n                  {openLoanTransactionSignature && (\n                    <Link\n                      className={styles.link}\n                      href={`https://explorer.solana.com/tx/${openLoanTransactionSignature}?cluster=${WALLET_ADAPTER_NETWORK}`}\n                      target=\"_blank\"\n                      align=\"right\"\n                    >\n                      Transaction\n                      <LaunchIcon className={styles.icon} />\n                    </Link>\n                  )}\n                </Grid>\n              </Grid>\n            </Box>\n          ) : (\n            <>\n              <Button onClick={createLoan} variant={'contained'}>\n                Open Loan\n              </Button>\n              &nbsp;&nbsp;&nbsp;\n              <Button\n                onClick={handleClose}\n                variant={'contained'}\n                color={'warning'}\n              >\n                Cancel\n              </Button>\n            </>\n          )}\n        </Box>\n      </Fade>\n    </Modal>\n  )\n}\n"],"sourceRoot":""}