{"version":3,"sources":["Components/OpenLoan/OpenLoanButton.tsx","utils/constants.ts","Components/CloseLoan/CloseLoan.tsx","utils/marinade-state.ts","Components/LoanList/LoanList.tsx","utils/helpers.ts","Components/Arbitrage/Arbitrage.tsx","Components/Arbitrage/ArbBananasEstimate.tsx","Components/LoanAmountEstimate/LoanAmountEstimate.tsx","Components/Arbitrage/ArbKongEstimate.tsx","redux/modules/app.ts","redux/modules/loans.ts","redux/helpers.ts","Components/Wallet/Wallet.tsx","Components/NavBar/NavBar.tsx","Components/MainBox/Tabs.tsx","Components/MainBox/MainBox.tsx","Components/OraclePrices/OraclePrices.tsx","Components/BottomBar/BottomBar.tsx","Components/Home/Home.tsx","Components/App/App.tsx","reportWebVitals.ts","redux/index.ts","index.tsx","utils/notify.tsx","utils/wallet-config.ts","Components/OpenLoan/OpenLoan.tsx"],"names":["OpenLoanButton","publicKey","useWallet","dispatch","useDispatch","className","onClick","setOpenLoanModal","disabled","variant","LOAN_LIST_SCANNER_TIMEOUT","NAV_BAR_SCREEN_MIN_WIDTH_FOR_WALLET_BUTTON","LOAN_LIST_SCREEN_MIN_WIDTH_FOR_ROWS_DISPLAY","PYTH_SOLANA_CLUSTER_NAME","KONG_MINT_AUTHORITY_SEED","BANANA_MINT_AUTHORITY_SEED","PROGRAM_VAULT_SEED","KONG_LOAN_ACCOUNT_SIZE","PROGRAM_STATE_ACCOUNT","PublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","BANANA_MINT","KONG_MINT","KONGS_HOARD","SOL_ORACLE_PRODUCT","SOL_ORACLE_PRICE","KONG_ORACLE_PRODUCT","KONG_ORACLE_PRICE","MARINADE_PROGRAM_ID","MARINADE_STATE_ID","MSOL_MINT","MSOL_MINT_AUTH","SOL_LEG","MSOL_LEG","MSOL_LEG_AUTHORITY_INFO","RESERVE_PDA_INFO","MSOL_TREASURY","RAD_ID","SYSTEM_PROGRAM_ID","SOLANA_TOKEN_ID","RENT_PROGRAM_ID","findAssociatedTokenAddress","walletAddress","tokenMintAddress","a","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","CloseLoan","props","connection","useConnection","sendTransaction","useState","loading","setLoading","notify","useNotify","useCallback","signature","owner","user_banana_transfer_authority","Keypair","bananaAtaAddress","createWithSeed","loanAccount","program_vault_derived_pubKey","programVaultAuthority","dataLayout","struct","u8","data","Buffer","alloc","span","encode","instruction","transaction","Transaction","add","spl","createApproveInstruction","loanAmount","TransactionInstruction","keys","pubkey","isSigner","isWritable","programId","getTokenAccountBalance","walletBalance","walletBalanceBananas","value","uiAmount","LAMPORTS_PER_SOL","Error","toFixed","signers","setScanForNewLoans","confirmTransaction","message","color","size","buttonSize","text","Fee","basis_points","this","LiqPool","lp_mint","lp_mint_authority_bump_seed","sol_leg_bump_seed","st_sol_leg_authority_bump_seed","st_sol_leg","lp_liquidity_target","lp_max_fee","lp_min_fee","treasury_cut","lp_supply","lended_from_sol_leg","liquidity_sol_cap","List_StakeDiscriminator_StakeRecord_u32_","account","item_size","count","new_account","copied_count","List_ValidatorRecordDiscriminator_ValidatorRecord_u32_","Pubkey","elem0","StakeSystem","stake_list","total_cooling_down","stake_deposit_bump_seed","stake_withdraw_bump_seed","slots_for_stake_delta","last_stake_delta_epoch","min_stake","extra_stake_delta_runs","State","st_sol_mint","admin_authority","operational_sol_account","treasury_msol_account","reserve_bump_seed","st_mint_authority_bump_seed","rent_exempt_for_token_acc","reward_fee","stake_system","validator_system","liq_pool","available_reserve_balance","st_sol_supply","st_sol_price","circulating_ticket_count","circulating_ticket_balance","lended_from_reserve","min_deposit","min_withdraw","staking_sol_cap","ValidatorSystem","validator_list","manager_authority","total_validator_score","total_active_balance","auto_add_validator_enabled","MARINADE_BORSH_SCHEMA","Map","kind","fields","state_address","beneficiary","lamports_amount","created_epoch","validator_account","active_balance","score","duplication_flag_bump_seed","getBigNumber","num","undefined","parseFloat","toString","borshPublicKey","u64","i64","LoanList","loans","useSelector","getLoans","componentIsMounted","useRef","smallScreen","getScreen","windowWidth","setNotifier","walletKey","equals","setLoansList","useEffect","setScanTimer","current","processAccountsList","accounts","loanList","i","length","layout","decode","from","timestamp","loan_creation_date","dateTxt","Date","toLocaleDateString","push","collateral","collateral_amount","marketPrice","market_price","loan_amount","dateOpened","getProgramAccounts","commitment","filters","memcmp","bytes","offset","then","list","getAccounts","loansList","currentLoanTotal","checkTimeout","scan","scanTimer","getTime","setInterval","checkAccountsTotal","theme","createTheme","components","MuiTableCell","styleOverrides","root","MuiTableContainer","backgroundColor","component","sx","fontSize","m","src","alt","width","marginLeft","loansSorted","Object","assign","sort","b","muiTableCellOverride","borderBottom","padding","map","row","bgcolor","border","raised","aria-label","scope","container","direction","alignItems","style","marginTop","align","numberWithCommas","Math","round","Paper","minWidth","replace","getCollateralAsNumber","validNumericTrailingCharCheck","filtered","replaceAll","slice","match","calculateLoanAmount","solPrice","depositValue","price","loanEst","internationalNumberFormat","Intl","NumberFormat","format","calculateArbAmount","amount","priceData","arbToken","swapEstimate","calculateArbAmountKong","format5Dec","balance","divisor","numLamportsToSol","CssTextField","styled","TextField","borderBottomColor","borderColor","useStyles","makeStyles","link","display","textDecoration","icon","Arbitrage","setArbToken","setAmount","arbTransactionSignature","getArbTransactionSignature","styles","handleSetAmount","ev","target","changeArbDirection","arbitrageBananas","nu64","lamports","kongATA","kongMintAuthority","bananaATA","transactionItems","getAccountInfo","dataLayoutATA","ataData","setArbTransactionSignature","arbitrageKong","bananaMintAuthority","walletBalanceKONG","maxBananas","maxKong","walletBalanceKong","id","autoFocus","fullWidth","type","onChange","bind","label","flexGrow","spacing","item","xs","title","placement","position","top","href","WALLET_ADAPTER_NETWORK","ArbBananasEstimate","oraclePrices","getOraclePrices","KONG_USD","LoanAmountEstimate","SOL_USD","ArbKongEstimate","initialState","screen","windowHeight","BANANA_USD","timer","tab","setScreen","typedAction","setOraclePrices","setOracleTimer","oracleTimer","setTab","appReducer","state","action","produce","draftState","payload","clearInterval","app","getSelectedTab","openLoanTransactionSignature","scanStartTime","openLoanModal","setOpenLoanTransactionSignature","startTime","open","loansReducer","currentTime","getOpenLoanModal","getOpenLoanTransactionSignature","Wallet","featuredWallets","logo","children","NavBar","AppBar","Toolbar","Box","Grid","textAlign","a11yProps","index","FullWidthTabs","selectedTab","MuiAppBar","MuiTabs","indicator","ThemeProvider","Tabs","event","newValue","indicatorColor","textColor","Tab","TabPanel","other","role","hidden","aria-labelledby","MainBox","Item","typography","body2","palette","secondary","columns","justifyContent","OraclePrices","useMemo","Connection","clusterApiUrl","pythPublicKey","getPythProgramKeyForCluster","getPrices","handleAccounts","productOnly","base","parseBaseData","AccountType","parseProductData","priceAccountKey","product","productAccountKeyToProduct","priceAccountKeyToProductAccountKey","productLookup","parsePriceData","marketToPriceData","symbol","Typography","BottomBar","elevation","Divider","orientation","flexItem","Home","network","endpoint","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getLedgerWallet","getSolletWallet","getSolletExtensionWallet","onError","e","handleWalletError","autoConnect","OpenLoan","App","handler","window","innerWidth","innerHeight","addEventListener","removeEventListener","maxSnack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById","notification","enqueueSnackbar","useSnackbar","WalletAdapterNetwork","Devnet","setCollateral","handleClose","maxAmountToStake","nativeSOLBalance","totalStaked","transactionFee","marinadeState","stakingSolCap","Number","extraAmountToKeep","toNumber","fillCap","maxSolBalance","max","console","log","createLoan","banana_mint_authority","loan_account","userMSolAtaAddress","SystemProgram","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","createAccount","AccountLayout","basePubkey","seed","createAccountWithSeed","Token","createInitAccountInstruction","openLoanTransactionItems","dataLayoutMSolATA","mSolAtaData","getBalance","walletBalanceSOL","stateAccount","deserializeUnchecked","marinade","getRecentBlockhash","feeCalculator","lamportsPerSignature","WalletSendTransactionError","aria-describedby","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","in","left","transform","boxShadow","p","flexWrap"],"mappings":"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","file":"static/js/main.6bd71751.chunk.js","sourcesContent":["import { useWallet } from '@solana/wallet-adapter-react'\nimport { FC } from 'react'\nimport { Button } from '@mui/material'\nimport { useDispatch } from 'react-redux'\nimport { setOpenLoanModal } from '../../redux/modules/loans'\n\nexport const OpenLoanButton: FC = () => {\n  const { publicKey } = useWallet()\n  const dispatch = useDispatch()\n  const handleOpen = () => dispatch(setOpenLoanModal(true))\n\n  return (\n    <div>\n      <Button\n        className=\"Open-loan-button\"\n        onClick={handleOpen}\n        disabled={!publicKey}\n        variant={'contained'}\n      >\n        Open New Loan\n      </Button>\n    </div>\n  )\n}\n","import { Cluster, PublicKey } from '@solana/web3.js'\n\nexport const LOAN_LIST_SCANNER_TIMEOUT = 60\n\n// minimum screen width required in order to display wallet connect button in top nav bar\nexport const NAV_BAR_SCREEN_MIN_WIDTH_FOR_WALLET_BUTTON = 768\n\n// minimum screen width required to display loan list in rows\nexport const LOAN_LIST_SCREEN_MIN_WIDTH_FOR_ROWS_DISPLAY = 1024\n\n// UI Only, this is not for the backend smart contract.\nexport const PYTH_SOLANA_CLUSTER_NAME: Cluster = 'devnet'\n\nexport const KONG_MINT_AUTHORITY_SEED = 'kong_mint'\nexport const BANANA_MINT_AUTHORITY_SEED = 'banana_mint'\nexport const PROGRAM_VAULT_SEED = 'PROGRAM_VAULT'\n\nexport const KONG_STATE_ACCOUNT_SIZE = 283\nexport const KONG_LOAN_ACCOUNT_SIZE = 257\n\nexport const CREATOR_AUTHORITY: PublicKey = new PublicKey(\n  '4ZKXWewnacnm2ApTJC68DzoNHaJg6gtTXZA3LLumfMtX'\n)\n\nexport const PROGRAM_CREATOR_AUTHORITY: PublicKey = new PublicKey(\n  '9kyWPBeU9RnjxnWkkYKYVeShAwQgPDmxujr77thREZtN'\n)\n\nexport const PROGRAM_STATE_ACCOUNT = new PublicKey(\n  'EvcBDSzxPM5WjQjgZGiewFpyKW9cEAVGoQeBkRMZo7uU'\n)\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID: PublicKey = new PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'\n)\n\nexport const BANANA_MINT = new PublicKey(\n  '98ct6KjzotM4e6Hn2PdBhYTJfi7yYDBhxVjcC21H7oUF'\n)\n\nexport const KONG_MINT = new PublicKey(\n  'CY5mvkTFqgiHQd4Fbb5ykv6aKCpczJVbxWxFXpCZZCJc'\n)\n\nexport const KONGS_HOARD = new PublicKey(\n  'HADUDXZsxpv5Nb4M81EaAHh6VxkSKkuDtdUsPHXm3Sv9'\n)\n\n// PYTH\nexport const SOL_ORACLE_PRODUCT = new PublicKey(\n  '3Mnn2fX6rQyUsyELYms1sBJyChWofzSNRoqYzvgMVz5E'\n)\n\nexport const SOL_ORACLE_PRICE = new PublicKey(\n  'J83w4HKfqxwcq3BEMMkPFSppX3gqekLyLJBexebFVkix'\n)\n\nexport const BANANA_ORACLE_PRODUCT = new PublicKey(\n  '5SSkXsEKQepHHAewytPVwdej4epN1nxgLVM84L4KXgy7'\n)\nexport const BANANA_ORACLE_PRICE = new PublicKey(\n  '5SSkXsEKQepHHAewytPVwdej4epN1nxgLVM84L4KXgy7'\n)\n\nexport const KONG_ORACLE_PRODUCT = new PublicKey(\n  '2ciUuGZiee5macAMeQ7bHGTJtwcYTgnt6jdmQnnKZrfu'\n)\nexport const KONG_ORACLE_PRICE = new PublicKey(\n  'EdVCmQ9FSPcVe5YySXDPCRmc8aDQLKJ9xvYBMZPie1Vw'\n)\n\n// Marinade\nexport const MARINADE_PROGRAM_ID = new PublicKey(\n  'MarBmsSgKXdrN1egZf5sqe1TMai9K1rChYNDJgjq7aD'\n)\n\nexport const MARINADE_STATE_ID = new PublicKey(\n  '8szGkuLTAux9XMgZ2vtY39jVSowEcpBfFfD8hXSEqdGC'\n)\n\nexport const MSOL_MINT: PublicKey = new PublicKey(\n  'mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So'\n)\n\nexport const MSOL_MINT_AUTH: PublicKey = new PublicKey(\n  '3JLPCS1qM2zRw3Dp6V4hZnYHd4toMNPkNesXdX9tg6KM'\n)\n\nexport const SOL_LEG: PublicKey = new PublicKey(\n  'UefNb6z6yvArqe4cJHTXCqStRsKmWhGxnZzuHbikP5Q'\n)\n\nexport const MSOL_LEG: PublicKey = new PublicKey(\n  '7GgPYjS5Dza89wV6FpZ23kUJRG5vbQ1GM25ezspYFSoE'\n)\n\nexport const MSOL_LEG_AUTHORITY_INFO: PublicKey = new PublicKey(\n  'EyaSjUtSgo9aRD1f8LWXwdvkpDTmXAW54yoSHZRF14WL'\n)\n\nexport const RESERVE_PDA_INFO: PublicKey = new PublicKey(\n  'Du3Ysj1wKbxPKkuPPnvzQLQh8oMSVifs3jGZjJWXFmHN'\n)\n\nexport const MSOL_TREASURY: PublicKey = new PublicKey(\n  '8ZUcztoAEhpAeC2ixWewJKQJsSUGYSGPVAjkhDJYf5Gd'\n)\n\n// END Marinade\n\nexport const RAD_ID = new PublicKey(\n  '2vLPCe92GpHKJRGDp9GjZRzAyeLh6RtW1ACAi9n4Fa1u'\n)\n\nexport const SYSTEM_PROGRAM_ID = new PublicKey(\n  '11111111111111111111111111111111'\n)\n\nexport const SOLANA_TOKEN_ID = new PublicKey('11111111111111111111111111111111')\nexport const RENT_PROGRAM_ID = new PublicKey(\n  'SysvarRent111111111111111111111111111111111'\n)\nexport const CLOCK_PROGRAM_ID = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111'\n)\nexport const SOL_MINT = new PublicKey('11111111111111111111111111111111')\n","import { useConnection, useWallet } from '@solana/wallet-adapter-react'\nimport {\n  Keypair,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  Signer,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n} from '@solana/web3.js'\nimport * as spl from '@solana/spl-token'\nimport { FC, useCallback, useState } from 'react'\nimport {\n  BANANA_MINT,\n  KONGS_HOARD,\n  MARINADE_PROGRAM_ID,\n  MARINADE_STATE_ID,\n  MSOL_LEG,\n  MSOL_MINT,\n  MSOL_TREASURY,\n  PROGRAM_STATE_ACCOUNT,\n  PROGRAM_VAULT_SEED,\n  RAD_ID,\n  SOL_LEG,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  SYSTEM_PROGRAM_ID,\n} from '../../utils/constants'\nimport { Button, CircularProgress } from '@mui/material'\nimport { struct, u8 } from '@solana/buffer-layout'\nimport { useDispatch } from 'react-redux'\nimport { useNotify } from '../../utils/notify'\nimport { setScanForNewLoans } from '../../redux/modules/loans'\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token'\n\ninterface CloseLoanProps {\n  loanAccount: PublicKey\n  loanAmount: number\n  buttonSize?: 'small' | 'large' | 'medium' | undefined\n  text?: string\n}\n\nasync function findAssociatedTokenAddress(\n  walletAddress: PublicKey,\n  tokenMintAddress: PublicKey\n): Promise<PublicKey> {\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        walletAddress.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        tokenMintAddress.toBuffer(),\n      ],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0]\n}\n\nexport const CloseLoan: FC<CloseLoanProps> = (props) => {\n  const { connection } = useConnection()\n  const { publicKey, sendTransaction } = useWallet()\n  const [loading, setLoading] = useState(false)\n  const dispatch = useDispatch()\n  const notify = useNotify()\n\n  const onClick = useCallback(async () => {\n    if (!publicKey) {\n      notify('error', 'Wallet not connected!')\n      return\n    }\n\n    let signature: TransactionSignature = ''\n    try {\n      setLoading(true)\n      const owner = publicKey\n\n      const user_banana_transfer_authority = new Keypair()\n\n      // const user_banana_account_seed = 'USER_BANANA_ACCOUNT'\n      // const user_banana_account_derived_pubKey = await PublicKey.createWithSeed(\n      //   props.loanAccount,\n      //   user_banana_account_seed,\n      //   TOKEN_PROGRAM_ID\n      // )\n      const bananaAtaAddress = await findAssociatedTokenAddress(\n        owner,\n        BANANA_MINT\n      )\n\n      const program_vault_derived_pubKey = await PublicKey.createWithSeed(\n        props.loanAccount,\n        PROGRAM_VAULT_SEED,\n        TOKEN_PROGRAM_ID\n      )\n      const programVaultAuthority = await PublicKey.findProgramAddress(\n        [props.loanAccount.toBuffer(), program_vault_derived_pubKey.toBuffer()],\n        RAD_ID\n      )\n\n      let dataLayout = struct([u8('instruction')])\n      const data = Buffer.alloc(dataLayout.span)\n      dataLayout.encode(\n        {\n          instruction: 1,\n        },\n        data\n      )\n\n      const transaction = new Transaction().add(\n        // Approve the transfer of the stable coin\n        spl.Token.createApproveInstruction(\n          TOKEN_PROGRAM_ID,\n          bananaAtaAddress,\n          user_banana_transfer_authority.publicKey,\n          owner,\n          [],\n          props.loanAmount\n        ),\n        // send close loan instruction\n        new TransactionInstruction({\n          keys: [\n            {\n              pubkey: PROGRAM_STATE_ACCOUNT,\n              isSigner: false,\n              isWritable: false,\n            },\n            { pubkey: MARINADE_STATE_ID, isSigner: false, isWritable: true },\n            { pubkey: props.loanAccount, isSigner: false, isWritable: true },\n            {\n              pubkey: program_vault_derived_pubKey,\n              isSigner: false,\n              isWritable: true,\n            },\n            { pubkey: owner, isSigner: false, isWritable: true },\n            { pubkey: BANANA_MINT, isSigner: false, isWritable: true },\n            {\n              pubkey: bananaAtaAddress,\n              isSigner: false,\n              isWritable: true,\n            },\n            {\n              pubkey: user_banana_transfer_authority.publicKey,\n              isSigner: true,\n              isWritable: false,\n            },\n            {\n              pubkey: programVaultAuthority[0],\n              isSigner: false,\n              isWritable: false,\n            },\n            {\n              pubkey: KONGS_HOARD,\n              isSigner: false,\n              isWritable: true,\n            },\n            {\n              pubkey: MSOL_MINT,\n              isSigner: false,\n              isWritable: true,\n            },\n            {\n              pubkey: SOL_LEG,\n              isSigner: false,\n              isWritable: true,\n            },\n            {\n              pubkey: MSOL_LEG,\n              isSigner: false,\n              isWritable: true,\n            },\n            {\n              pubkey: MSOL_TREASURY,\n              isSigner: false,\n              isWritable: true,\n            },\n            { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\n            { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n            { pubkey: MARINADE_PROGRAM_ID, isSigner: false, isWritable: false },\n          ],\n          programId: RAD_ID,\n          data,\n        })\n      )\n\n      const walletBalance = await connection.getTokenAccountBalance(\n        bananaAtaAddress\n      )\n      const walletBalanceBananas = walletBalance.value.uiAmount\n      if (\n        walletBalanceBananas !== null &&\n        walletBalanceBananas < props.loanAmount / LAMPORTS_PER_SOL\n      ) {\n        throw Error(\n          `Insufficient wallet balance of ${walletBalanceBananas.toFixed(\n            9\n          )} Bananas for transaction of ${\n            props.loanAmount / LAMPORTS_PER_SOL\n          } Bananas.`\n        )\n      }\n\n      notify('info', 'Close Loan Request Approval Needed')\n      const signers: Signer[] = [user_banana_transfer_authority]\n\n      signature = await sendTransaction(transaction, connection, {\n        signers: signers,\n      })\n      notify('info', 'Transaction sent:', signature)\n      dispatch(setScanForNewLoans(true))\n\n      await connection.confirmTransaction(signature, 'processed')\n      notify('success', 'Transaction successful!', signature)\n    } catch (error: any) {\n      setLoading(false)\n      dispatch(setScanForNewLoans(false))\n      notify('error', `Transaction failed! ${error?.message}`, signature)\n      return\n    }\n  }, [publicKey, props, connection, sendTransaction, dispatch, notify])\n\n  return (\n    <>\n      {loading ? (\n        <CircularProgress color=\"success\" />\n      ) : (\n        <Button\n          size={props.buttonSize}\n          onClick={onClick}\n          disabled={!publicKey}\n          variant={'contained'}\n        >\n          {props.text ? props.text : 'Close Loan'}\n        </Button>\n      )}\n    </>\n  )\n}\n","import { PublicKey } from '@solana/web3.js'\nimport BN from 'bn.js'\nexport class Fee {\n  basis_points: number\n\n  constructor({ basis_points }: { basis_points: number }) {\n    this.basis_points = basis_points\n  }\n}\nexport class LiqPool {\n  lp_mint: Pubkey\n  lp_mint_authority_bump_seed: number\n  sol_leg_bump_seed: number\n  st_sol_leg_authority_bump_seed: number\n  st_sol_leg: Pubkey\n  lp_liquidity_target: BN\n  lp_max_fee: Fee\n  lp_min_fee: Fee\n  treasury_cut: Fee\n  lp_supply: BN\n  lended_from_sol_leg: BN\n  liquidity_sol_cap: BN\n\n  constructor({\n    lp_mint,\n    lp_mint_authority_bump_seed,\n    sol_leg_bump_seed,\n    st_sol_leg_authority_bump_seed,\n    st_sol_leg,\n    lp_liquidity_target,\n    lp_max_fee,\n    lp_min_fee,\n    treasury_cut,\n    lp_supply,\n    lended_from_sol_leg,\n    liquidity_sol_cap,\n  }: {\n    lp_mint: Pubkey\n    lp_mint_authority_bump_seed: number\n    sol_leg_bump_seed: number\n    st_sol_leg_authority_bump_seed: number\n    st_sol_leg: Pubkey\n    lp_liquidity_target: BN\n    lp_max_fee: Fee\n    lp_min_fee: Fee\n    treasury_cut: Fee\n    lp_supply: BN\n    lended_from_sol_leg: BN\n    liquidity_sol_cap: BN\n  }) {\n    this.lp_mint = lp_mint\n    this.lp_mint_authority_bump_seed = lp_mint_authority_bump_seed\n    this.sol_leg_bump_seed = sol_leg_bump_seed\n    this.st_sol_leg_authority_bump_seed = st_sol_leg_authority_bump_seed\n    this.st_sol_leg = st_sol_leg\n    this.lp_liquidity_target = lp_liquidity_target\n    this.lp_max_fee = lp_max_fee\n    this.lp_min_fee = lp_min_fee\n    this.treasury_cut = treasury_cut\n    this.lp_supply = lp_supply\n    this.lended_from_sol_leg = lended_from_sol_leg\n    this.liquidity_sol_cap = liquidity_sol_cap\n  }\n}\nexport class List_StakeDiscriminator_StakeRecord_u32_ {\n  account: Pubkey\n  item_size: number\n  count: number\n  new_account: Pubkey\n  copied_count: number\n\n  constructor({\n    account,\n    item_size,\n    count,\n    new_account,\n    copied_count,\n  }: {\n    account: Pubkey\n    item_size: number\n    count: number\n    new_account: Pubkey\n    copied_count: number\n  }) {\n    this.account = account\n    this.item_size = item_size\n    this.count = count\n    this.new_account = new_account\n    this.copied_count = copied_count\n  }\n}\nexport class List_ValidatorRecordDiscriminator_ValidatorRecord_u32_ {\n  account: Pubkey\n  item_size: number\n  count: number\n  new_account: Pubkey\n  copied_count: number\n\n  constructor({\n    account,\n    item_size,\n    count,\n    new_account,\n    copied_count,\n  }: {\n    account: Pubkey\n    item_size: number\n    count: number\n    new_account: Pubkey\n    copied_count: number\n  }) {\n    this.account = account\n    this.item_size = item_size\n    this.count = count\n    this.new_account = new_account\n    this.copied_count = copied_count\n  }\n}\nexport class Pubkey {\n  value: PublicKey\n\n  constructor({ elem0 }: { elem0: Buffer }) {\n    this.value = new PublicKey(elem0)\n  }\n}\nexport class StakeSystem {\n  stake_list: List_StakeDiscriminator_StakeRecord_u32_\n  total_cooling_down: BN\n  stake_deposit_bump_seed: number\n  stake_withdraw_bump_seed: number\n  slots_for_stake_delta: BN\n  last_stake_delta_epoch: BN\n  min_stake: BN\n  extra_stake_delta_runs: number\n\n  constructor({\n    stake_list,\n    total_cooling_down,\n    stake_deposit_bump_seed,\n    stake_withdraw_bump_seed,\n    slots_for_stake_delta,\n    last_stake_delta_epoch,\n    min_stake,\n    extra_stake_delta_runs,\n  }: {\n    stake_list: List_StakeDiscriminator_StakeRecord_u32_\n    total_cooling_down: BN\n    stake_deposit_bump_seed: number\n    stake_withdraw_bump_seed: number\n    slots_for_stake_delta: BN\n    last_stake_delta_epoch: BN\n    min_stake: BN\n    extra_stake_delta_runs: number\n  }) {\n    this.stake_list = stake_list\n    this.total_cooling_down = total_cooling_down\n    this.stake_deposit_bump_seed = stake_deposit_bump_seed\n    this.stake_withdraw_bump_seed = stake_withdraw_bump_seed\n    this.slots_for_stake_delta = slots_for_stake_delta\n    this.last_stake_delta_epoch = last_stake_delta_epoch\n    this.min_stake = min_stake\n    this.extra_stake_delta_runs = extra_stake_delta_runs\n  }\n}\nexport class State {\n  st_sol_mint: Pubkey\n  admin_authority: Pubkey\n  operational_sol_account: Pubkey\n  treasury_msol_account: Pubkey\n  reserve_bump_seed: number\n  st_mint_authority_bump_seed: number\n  rent_exempt_for_token_acc: BN\n  reward_fee: Fee\n  stake_system: StakeSystem\n  validator_system: ValidatorSystem\n  liq_pool: LiqPool\n  available_reserve_balance: BN\n  st_sol_supply: BN\n  st_sol_price: BN\n  circulating_ticket_count: BN\n  circulating_ticket_balance: BN\n  lended_from_reserve: BN\n  min_deposit: BN\n  min_withdraw: BN\n  staking_sol_cap: BN\n\n  constructor({\n    st_sol_mint,\n    admin_authority,\n    operational_sol_account,\n    treasury_msol_account,\n    reserve_bump_seed,\n    st_mint_authority_bump_seed,\n    rent_exempt_for_token_acc,\n    reward_fee,\n    stake_system,\n    validator_system,\n    liq_pool,\n    available_reserve_balance,\n    st_sol_supply,\n    st_sol_price,\n    circulating_ticket_count,\n    circulating_ticket_balance,\n    lended_from_reserve,\n    min_deposit,\n    min_withdraw,\n    staking_sol_cap,\n  }: {\n    st_sol_mint: Pubkey\n    admin_authority: Pubkey\n    operational_sol_account: Pubkey\n    treasury_msol_account: Pubkey\n    reserve_bump_seed: number\n    st_mint_authority_bump_seed: number\n    rent_exempt_for_token_acc: BN\n    reward_fee: Fee\n    stake_system: StakeSystem\n    validator_system: ValidatorSystem\n    liq_pool: LiqPool\n    available_reserve_balance: BN\n    st_sol_supply: BN\n    st_sol_price: BN\n    circulating_ticket_count: BN\n    circulating_ticket_balance: BN\n    lended_from_reserve: BN\n    min_deposit: BN\n    min_withdraw: BN\n    staking_sol_cap: BN\n  }) {\n    this.st_sol_mint = st_sol_mint\n    this.admin_authority = admin_authority\n    this.operational_sol_account = operational_sol_account\n    this.treasury_msol_account = treasury_msol_account\n    this.reserve_bump_seed = reserve_bump_seed\n    this.st_mint_authority_bump_seed = st_mint_authority_bump_seed\n    this.rent_exempt_for_token_acc = rent_exempt_for_token_acc\n    this.reward_fee = reward_fee\n    this.stake_system = stake_system\n    this.validator_system = validator_system\n    this.liq_pool = liq_pool\n    this.available_reserve_balance = available_reserve_balance\n    this.st_sol_supply = st_sol_supply\n    this.st_sol_price = st_sol_price\n    this.circulating_ticket_count = circulating_ticket_count\n    this.circulating_ticket_balance = circulating_ticket_balance\n    this.lended_from_reserve = lended_from_reserve\n    this.min_deposit = min_deposit\n    this.min_withdraw = min_withdraw\n    this.staking_sol_cap = staking_sol_cap\n  }\n}\nexport class TicketAccountData {\n  state_address: Pubkey\n  beneficiary: Pubkey\n  lamports_amount: BN\n  created_epoch: BN\n\n  constructor({\n    state_address,\n    beneficiary,\n    lamports_amount,\n    created_epoch,\n  }: {\n    state_address: Pubkey\n    beneficiary: Pubkey\n    lamports_amount: BN\n    created_epoch: BN\n  }) {\n    this.state_address = state_address\n    this.beneficiary = beneficiary\n    this.lamports_amount = lamports_amount\n    this.created_epoch = created_epoch\n  }\n}\nexport class ValidatorRecord {\n  validator_account: Pubkey\n  active_balance: BN\n  score: number\n  last_stake_delta_epoch: BN\n  duplication_flag_bump_seed: number\n\n  constructor({\n    validator_account,\n    active_balance,\n    score,\n    last_stake_delta_epoch,\n    duplication_flag_bump_seed,\n  }: {\n    validator_account: Pubkey\n    active_balance: BN\n    score: number\n    last_stake_delta_epoch: BN\n    duplication_flag_bump_seed: number\n  }) {\n    this.validator_account = validator_account\n    this.active_balance = active_balance\n    this.score = score\n    this.last_stake_delta_epoch = last_stake_delta_epoch\n    this.duplication_flag_bump_seed = duplication_flag_bump_seed\n  }\n}\nexport class ValidatorSystem {\n  validator_list: List_ValidatorRecordDiscriminator_ValidatorRecord_u32_\n  manager_authority: Pubkey\n  total_validator_score: number\n  total_active_balance: BN\n  auto_add_validator_enabled: number\n\n  constructor({\n    validator_list,\n    manager_authority,\n    total_validator_score,\n    total_active_balance,\n    auto_add_validator_enabled,\n  }: {\n    validator_list: List_ValidatorRecordDiscriminator_ValidatorRecord_u32_\n    manager_authority: Pubkey\n    total_validator_score: number\n    total_active_balance: BN\n    auto_add_validator_enabled: number\n  }) {\n    this.validator_list = validator_list\n    this.manager_authority = manager_authority\n    this.total_validator_score = total_validator_score\n    this.total_active_balance = total_active_balance\n    this.auto_add_validator_enabled = auto_add_validator_enabled\n  }\n}\nexport const MARINADE_BORSH_SCHEMA = new Map<Function, any>([\n  [\n    Fee,\n    {\n      kind: 'struct',\n      fields: [['basis_points', 'u32']],\n    },\n  ],\n  [\n    LiqPool,\n    {\n      kind: 'struct',\n      fields: [\n        ['lp_mint', Pubkey],\n        ['lp_mint_authority_bump_seed', 'u8'],\n        ['sol_leg_bump_seed', 'u8'],\n        ['st_sol_leg_authority_bump_seed', 'u8'],\n        ['st_sol_leg', Pubkey],\n        ['lp_liquidity_target', 'u64'],\n        ['lp_max_fee', Fee],\n        ['lp_min_fee', Fee],\n        ['treasury_cut', Fee],\n        ['lp_supply', 'u64'],\n        ['lended_from_sol_leg', 'u64'],\n        ['liquidity_sol_cap', 'u64'],\n      ],\n    },\n  ],\n  [\n    List_StakeDiscriminator_StakeRecord_u32_,\n    {\n      kind: 'struct',\n      fields: [\n        ['account', Pubkey],\n        ['item_size', 'u32'],\n        ['count', 'u32'],\n        ['new_account', Pubkey],\n        ['copied_count', 'u32'],\n      ],\n    },\n  ],\n  [\n    List_ValidatorRecordDiscriminator_ValidatorRecord_u32_,\n    {\n      kind: 'struct',\n      fields: [\n        ['account', Pubkey],\n        ['item_size', 'u32'],\n        ['count', 'u32'],\n        ['new_account', Pubkey],\n        ['copied_count', 'u32'],\n      ],\n    },\n  ],\n  [\n    Pubkey,\n    {\n      kind: 'struct',\n      fields: [['elem0', [32]]],\n    },\n  ],\n  [\n    StakeSystem,\n    {\n      kind: 'struct',\n      fields: [\n        ['stake_list', List_StakeDiscriminator_StakeRecord_u32_],\n        ['total_cooling_down', 'u64'],\n        ['stake_deposit_bump_seed', 'u8'],\n        ['stake_withdraw_bump_seed', 'u8'],\n        ['slots_for_stake_delta', 'u64'],\n        ['last_stake_delta_epoch', 'u64'],\n        ['min_stake', 'u64'],\n        ['extra_stake_delta_runs', 'u32'],\n      ],\n    },\n  ],\n  [\n    State,\n    {\n      kind: 'struct',\n      fields: [\n        ['st_sol_mint', Pubkey],\n        ['admin_authority', Pubkey],\n        ['operational_sol_account', Pubkey],\n        ['treasury_msol_account', Pubkey],\n        ['reserve_bump_seed', 'u8'],\n        ['st_mint_authority_bump_seed', 'u8'],\n        ['rent_exempt_for_token_acc', 'u64'],\n        ['reward_fee', Fee],\n        ['stake_system', StakeSystem],\n        ['validator_system', ValidatorSystem],\n        ['liq_pool', LiqPool],\n        ['available_reserve_balance', 'u64'],\n        ['st_sol_supply', 'u64'],\n        ['st_sol_price', 'u64'],\n        ['circulating_ticket_count', 'u64'],\n        ['circulating_ticket_balance', 'u64'],\n        ['lended_from_reserve', 'u64'],\n        ['min_deposit', 'u64'],\n        ['min_withdraw', 'u64'],\n        ['staking_sol_cap', 'u64'],\n      ],\n    },\n  ],\n  [\n    TicketAccountData,\n    {\n      kind: 'struct',\n      fields: [\n        ['state_address', Pubkey],\n        ['beneficiary', Pubkey],\n        ['lamports_amount', 'u64'],\n        ['created_epoch', 'u64'],\n      ],\n    },\n  ],\n  [\n    ValidatorRecord,\n    {\n      kind: 'struct',\n      fields: [\n        ['validator_account', Pubkey],\n        ['active_balance', 'u64'],\n        ['score', 'u32'],\n        ['last_stake_delta_epoch', 'u64'],\n        ['duplication_flag_bump_seed', 'u8'],\n      ],\n    },\n  ],\n  [\n    ValidatorSystem,\n    {\n      kind: 'struct',\n      fields: [\n        [\n          'validator_list',\n          List_ValidatorRecordDiscriminator_ValidatorRecord_u32_,\n        ],\n        ['manager_authority', Pubkey],\n        ['total_validator_score', 'u32'],\n        ['total_active_balance', 'u64'],\n        ['auto_add_validator_enabled', 'u8'],\n      ],\n    },\n  ],\n])\n","import {\n  Box,\n  Card,\n  CardActions,\n  CardContent,\n  CircularProgress,\n  createTheme,\n  Grid,\n  LinearProgress,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  ThemeProvider,\n  Typography,\n} from '@mui/material'\nimport ArrowRightIcon from '@mui/icons-material/ArrowRight'\nimport {\n  publicKey as borshPublicKey,\n  u64,\n  i64,\n  u8,\n  struct,\n} from '@project-serum/borsh'\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react'\nimport { AccountInfo, LAMPORTS_PER_SOL, PublicKey } from '@solana/web3.js'\nimport { FC, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { LoansList } from '../../types'\nimport {\n  LOAN_LIST_SCREEN_MIN_WIDTH_FOR_ROWS_DISPLAY,\n  RAD_ID,\n} from '../../utils/constants'\nimport { CloseLoan } from '../CloseLoan/CloseLoan'\nimport {\n  checkTimeout,\n  getLoans,\n  setLoansList,\n  setNotifier,\n  setScanTimer,\n} from '../../redux/modules/loans'\nimport { useNotify } from '../../utils/notify'\nimport { numberWithCommas } from '../../utils/helpers'\nimport { SxProps } from '@mui/system'\nimport { OpenLoanButton } from '../OpenLoan/OpenLoanButton'\nimport { getScreen } from '../../redux/modules/app'\n\nfunction getBigNumber(num: any) {\n  return num === undefined || num === null ? 0 : parseFloat(num.toString())\n}\n\nlet dataLayout = struct([\n  u8('version'),\n  borshPublicKey('owner'),\n  u64('collateral_amount'),\n  u64('market_price'),\n  u64('loan_amount'),\n  borshPublicKey('loan_mint'),\n  i64('loan_creation_date'),\n  borshPublicKey('vault'),\n])\n\nexport const LoanList: FC = () => {\n  const { connection } = useConnection()\n  const { publicKey } = useWallet()\n  const dispatch = useDispatch()\n  const loans = useSelector(getLoans)\n  const componentIsMounted = useRef(true)\n  const notify = useNotify()\n  const { windowWidth } = useSelector(getScreen)\n  const smallScreen = windowWidth < LOAN_LIST_SCREEN_MIN_WIDTH_FOR_ROWS_DISPLAY\n\n  if (!loans.notify) {\n    dispatch(setNotifier(notify))\n  }\n\n  if (publicKey && !loans.walletKey?.equals(publicKey)) {\n    dispatch(setLoansList([], publicKey))\n  }\n\n  useEffect(() => {\n    return () => {\n      dispatch(setScanTimer(null, null))\n      componentIsMounted.current = false\n    }\n  }, [dispatch])\n\n  const processAccountsList = (\n    accounts: Array<{\n      pubkey: PublicKey\n      account: AccountInfo<Buffer>\n    }>\n  ) => {\n    let loanList: LoansList[] = []\n    for (var i = 0; i < accounts.length; i++) {\n      const data = accounts[i].account.data\n      const layout = dataLayout.decode(Buffer.from(data))\n\n      const timestamp = getBigNumber(layout.loan_creation_date) * 1000\n      const dateTxt = new Date(timestamp).toLocaleDateString('en-us')\n\n      loanList.push({\n        loanAccount: accounts[i].pubkey,\n        collateral: getBigNumber(layout.collateral_amount),\n        marketPrice: getBigNumber(layout.market_price),\n        loanAmount: getBigNumber(layout.loan_amount),\n        dateOpened: dateTxt,\n        timestamp: timestamp,\n      })\n    }\n\n    if (loanList.length) {\n      dispatch(setLoansList(loanList, publicKey))\n    } else {\n      dispatch(setLoansList(null, publicKey))\n    }\n  }\n\n  useEffect(() => {\n    async function getAccounts() {\n      if (publicKey) {\n        const accounts = connection.getProgramAccounts(RAD_ID, {\n          commitment: 'max',\n          filters: [\n            {\n              memcmp: {\n                bytes: publicKey.toString(),\n                offset: 1,\n              },\n            },\n          ],\n        })\n\n        if (componentIsMounted.current) {\n          accounts.then((accounts) => processAccountsList(accounts))\n        }\n      } else {\n        notify('warning', 'Wallet Not Connected')\n      }\n    }\n\n    // GET LOAN LIST\n    if (publicKey && loans.list?.length === 0) {\n      getAccounts()\n    }\n  })\n\n  useEffect(() => {\n    async function checkAccountsTotal(loansList: LoansList[] | null) {\n      const currentLoanTotal = loansList ? loansList.length : 0\n\n      if (publicKey) {\n        const accounts = connection.getProgramAccounts(RAD_ID, {\n          commitment: 'max',\n          filters: [\n            {\n              memcmp: {\n                bytes: publicKey.toString(),\n                offset: 1,\n              },\n            },\n          ],\n        })\n\n        if (componentIsMounted.current) {\n          accounts.then((accounts) => {\n            dispatch(checkTimeout())\n            if (accounts.length !== currentLoanTotal) {\n              processAccountsList(accounts)\n            }\n          })\n        }\n      } else {\n        notify('warning', 'Wallet Not Connected')\n      }\n    }\n\n    // SCAN FOR CHANGES TO ACCOUNTS TOTAL\n    if (publicKey && loans.scan && loans.scanTimer === null) {\n      dispatch(\n        setScanTimer(\n          new Date().getTime(),\n          setInterval(() => checkAccountsTotal(loans.list), 5000)\n        )\n      )\n    }\n  })\n\n  const theme = createTheme({\n    components: {\n      MuiTableCell: {\n        styleOverrides: {\n          root: {\n            color: 'white',\n          },\n        },\n      },\n      MuiTableContainer: {\n        styleOverrides: {\n          root: {\n            backgroundColor: 'transparent',\n          },\n        },\n      },\n    },\n  })\n\n  if (loans.scan) {\n    return (\n      <>\n        <Typography component=\"div\">\n          <Box\n            className=\"Updating-loan-list-text\"\n            sx={{ fontSize: 'h5.fontSize', m: 1 }}\n          >\n            Updating Loan List\n          </Box>\n          <div>\n            <img\n              className={'Dancing-banana'}\n              src=\"/dancing-banana.gif\"\n              alt=\"Updating Loan List\"\n            />\n          </div>\n        </Typography>\n        <br />\n        <LinearProgress sx={{ width: '30%', marginLeft: '35%' }} />\n      </>\n    )\n  } else if (loans.list?.length) {\n    let loansUnsorted: LoansList[] = Object.assign([], loans.list)\n    let loansSorted: LoansList[] = loansUnsorted.sort((a, b) => {\n      if (a.timestamp > b.timestamp) {\n        return -1\n      } else if (a.timestamp < b.timestamp) {\n        return 1\n      } else {\n        return 0\n      }\n    })\n    if (smallScreen) {\n      const muiTableCellOverride: SxProps = {\n        borderBottom: '0px',\n        padding: '0px',\n      }\n      return (\n        <>\n          <OpenLoanButton />\n          <br />\n          <ThemeProvider theme={theme}>\n            {loansSorted.map((row) => (\n              <div key={row.timestamp}>\n                <Card\n                  sx={{\n                    bgcolor: 'transparent',\n                    border: '1px solid rgb(76, 136, 86)',\n                  }}\n                  variant=\"outlined\"\n                  raised={false}\n                >\n                  <CardContent sx={{ padding: '5px' }}>\n                    <TableContainer>\n                      <Table aria-label=\"simple table\">\n                        <tbody>\n                          <TableRow>\n                            <TableCell sx={muiTableCellOverride}>\n                              Collateral Amount (SOL):\n                            </TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell\n                              sx={muiTableCellOverride}\n                              className=\"Loan-list-cell-value\"\n                              component=\"th\"\n                              scope=\"row\"\n                            >\n                              <Grid container direction=\"row\" alignItems=\"left\">\n                                <ArrowRightIcon />\n                                <span style={{ marginTop: '2px' }}>\n                                  {row.collateral / LAMPORTS_PER_SOL}\n                                </span>\n                              </Grid>\n                            </TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell sx={muiTableCellOverride} align=\"left\">\n                              SOL/USD Market Price:\n                            </TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell\n                              sx={muiTableCellOverride}\n                              className=\"Loan-list-cell-value\"\n                              align=\"left\"\n                            >\n                              <Grid container direction=\"row\" alignItems=\"left\">\n                                <ArrowRightIcon />\n                                <span style={{ marginTop: '2px' }}>\n                                  ${row.marketPrice}\n                                </span>\n                              </Grid>\n                            </TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell sx={muiTableCellOverride} align=\"left\">\n                              Loan Amount:\n                            </TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell\n                              sx={muiTableCellOverride}\n                              className=\"Loan-list-cell-value\"\n                              align=\"left\"\n                            >\n                              <Grid container direction=\"row\" alignItems=\"left\">\n                                <ArrowRightIcon />\n                                <span style={{ marginTop: '2px' }}>\n                                  {numberWithCommas(\n                                    Math.round(\n                                      row.loanAmount / LAMPORTS_PER_SOL\n                                    )\n                                  )}\n                                </span>\n                              </Grid>\n                            </TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell sx={muiTableCellOverride} align=\"left\">\n                              Date Opened:\n                            </TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell\n                              sx={muiTableCellOverride}\n                              className=\"Loan-list-cell-value\"\n                              align=\"left\"\n                            >\n                              <Grid container direction=\"row\" alignItems=\"left\">\n                                <ArrowRightIcon />\n                                <span style={{ marginTop: '2px' }}>\n                                  {row.dateOpened}\n                                </span>\n                              </Grid>\n                            </TableCell>\n                          </TableRow>\n                        </tbody>\n                      </Table>\n                    </TableContainer>\n                  </CardContent>\n                  <CardActions>\n                    <CloseLoan\n                      loanAccount={row.loanAccount}\n                      loanAmount={row.loanAmount}\n                      buttonSize=\"small\"\n                      text=\"Close Loan\"\n                    />\n                  </CardActions>\n                </Card>\n                <br />\n              </div>\n            ))}\n          </ThemeProvider>\n        </>\n      )\n    } else {\n      return (\n        <>\n          <OpenLoanButton />\n          <br />\n          <ThemeProvider theme={theme}>\n            <TableContainer component={Paper}>\n              <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Collateral Amount (SOL)</TableCell>\n                    <TableCell align=\"right\">SOL/USD Market Price</TableCell>\n                    <TableCell align=\"right\">Loan Amount</TableCell>\n                    <TableCell align=\"right\">Date Opened</TableCell>\n                    <TableCell align=\"right\"></TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {loansSorted.map((row) => (\n                    <TableRow\n                      sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                      key={row.timestamp}\n                    >\n                      <TableCell component=\"th\" scope=\"row\">\n                        {row.collateral / LAMPORTS_PER_SOL}\n                      </TableCell>\n                      <TableCell align=\"right\">${row.marketPrice}</TableCell>\n                      <TableCell align=\"right\">\n                        {numberWithCommas(\n                          Math.round(row.loanAmount / LAMPORTS_PER_SOL)\n                        )}\n                      </TableCell>\n                      <TableCell align=\"right\">{row.dateOpened}</TableCell>\n                      <TableCell align=\"right\">\n                        <CloseLoan\n                          loanAccount={row.loanAccount}\n                          loanAmount={row.loanAmount}\n                          buttonSize=\"small\"\n                          text=\"Close Loan\"\n                        />\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </ThemeProvider>\n        </>\n      )\n    }\n  } else if (loans.list == null) {\n    if (smallScreen) {\n      return (\n        <>\n          <OpenLoanButton />\n          <Typography component=\"div\">\n            <Box sx={{ fontSize: 'h5.fontSize', m: 1 }}>No Open Loans</Box>\n            <img className=\"Banana-peel\" src=\"/BananaPeel.png\" alt=\"No Loans\" />\n          </Typography>\n        </>\n      )\n    } else {\n      return (\n        <>\n          <OpenLoanButton />\n          <Typography component=\"div\">\n            <Box sx={{ fontSize: 'h5.fontSize', m: 1 }}>\n              You Have No Loans Currently Open With Wallet ID:\n            </Box>\n            <Box sx={{ fontSize: 'h8.fontSize', m: 1 }}>\n              {publicKey?.toString()}\n            </Box>\n            <img className=\"Banana-peel\" src=\"/BananaPeel.png\" alt=\"No Loans\" />\n          </Typography>\n        </>\n      )\n    }\n  } else {\n    return <CircularProgress />\n  }\n}\n","import { PriceData } from '@pythnetwork/client'\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js'\nimport { ArbToken } from '../types'\n\nexport function numberWithCommas(num: number): string {\n  return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n}\n\nexport function getCollateralAsNumber(collateral: string): number {\n  if (parseFloat(collateral)) {\n    return parseFloat(collateral)\n  } else {\n    return 0\n  }\n}\n\nexport function validNumericTrailingCharCheck(text: string) {\n  const filtered = text.replaceAll(/[^0-9.]/g, '')\n  if (filtered.slice(0, -1).match(/\\./) && filtered.slice(-1) === '.') {\n    // trailing period when a period is already in the text\n    return filtered.slice(0, -1)\n  } else {\n    return filtered\n  }\n}\n\nexport function calculateLoanAmount(\n  collateral: number,\n  solPrice: PriceData | null\n): string {\n  if (collateral > 0 && solPrice) {\n    const depositValue = solPrice.price * collateral\n    const loanEst = parseFloat((depositValue / 1.5).toFixed(5))\n    const internationalNumberFormat = new Intl.NumberFormat('en-US')\n    return (\n      internationalNumberFormat.format(collateral).toString() +\n      ' * ' +\n      ' $' +\n      internationalNumberFormat.format(solPrice.price).toString() +\n      ' / 1.5 = ' +\n      internationalNumberFormat.format(loanEst).toString()\n    )\n  } else {\n    return '0'\n  }\n}\n\nexport function calculateArbAmount(\n  amount: number,\n  priceData: PriceData | null,\n  arbToken: ArbToken\n): string {\n  if (amount > 0 && priceData) {\n    const swapEstimate = parseFloat((amount / priceData.price).toFixed(5))\n    const internationalNumberFormat = new Intl.NumberFormat('en-US')\n    return (\n      internationalNumberFormat.format(amount).toString() +\n      ' ' +\n      arbToken +\n      ' ' +\n      ' / ' +\n      ' $' +\n      internationalNumberFormat.format(priceData.price).toString() +\n      ' = ' +\n      internationalNumberFormat.format(swapEstimate).toString()\n    )\n  } else {\n    return '0'\n  }\n}\n\nexport function calculateArbAmountKong(\n  amount: number,\n  priceData: PriceData | null,\n  arbToken: ArbToken\n): string {\n  if (amount > 0 && priceData) {\n    const swapEstimate = parseFloat((amount * priceData.price).toFixed(5))\n    const internationalNumberFormat = new Intl.NumberFormat('en-US')\n    return (\n      internationalNumberFormat.format(amount).toString() +\n      ' ' +\n      arbToken +\n      ' ' +\n      ' * ' +\n      ' $' +\n      internationalNumberFormat.format(priceData.price).toString() +\n      ' = ' +\n      internationalNumberFormat.format(swapEstimate).toString()\n    )\n  } else {\n    return '0'\n  }\n}\n\nexport function format5Dec(balance: number, divisor?: number): string {\n  return balance === null\n    ? '--'\n    : (Math.round((balance / (divisor || 1)) * 1e5) / 1e5).toString()\n}\n\nexport function numLamportsToSol(amount: number): number {\n  return amount / LAMPORTS_PER_SOL\n}\n","import './Arbitrage.css'\nimport {\n  Typography,\n  Box,\n  Grid,\n  Tooltip,\n  styled,\n  TextField,\n  CircularProgress,\n  Link,\n  Button,\n} from '@mui/material'\nimport { u8, struct, nu64 } from '@solana/buffer-layout'\nimport { makeStyles } from '@material-ui/core'\nimport { FC, useCallback, useState } from 'react'\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline'\nimport { ArbToken } from '../../types'\nimport { ArbBananasEstimate } from './ArbBananasEstimate'\nimport { ArbKongEstimate } from './ArbKongEstimate'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  getArbTransactionSignature,\n  setArbTransactionSignature,\n} from '../../redux/modules/app'\nimport LaunchIcon from '@material-ui/icons/Launch'\nimport { WALLET_ADAPTER_NETWORK } from '../../utils/wallet-config'\nimport {\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  Signer,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n} from '@solana/web3.js'\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token'\nimport {\n  BANANA_MINT,\n  BANANA_MINT_AUTHORITY_SEED,\n  KONG_MINT,\n  KONG_MINT_AUTHORITY_SEED,\n  KONG_ORACLE_PRICE,\n  KONG_ORACLE_PRODUCT,\n  PROGRAM_STATE_ACCOUNT,\n  RAD_ID,\n  RENT_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  SYSTEM_PROGRAM_ID,\n} from '../../utils/constants'\nimport { useNotify } from '../../utils/notify'\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react'\nimport {\n  getCollateralAsNumber,\n  validNumericTrailingCharCheck,\n} from '../../utils/helpers'\n\nexport const CssTextField = styled(TextField)({\n  '& label.MuiInputLabel': {\n    color: 'white',\n  },\n  '& label.MuiInputLabel-root': {\n    color: 'white',\n  },\n  '& label.Mui-focused': {\n    color: 'white',\n  },\n  '& .MuiInput-underline:after': {\n    borderBottomColor: 'green',\n  },\n  '& .MuiInputBase-root': {\n    color: 'white',\n    backgroundColor: 'transparent',\n  },\n  '& .MuiOutlinedInput-root': {\n    '& fieldset': {\n      borderColor: 'green',\n    },\n    '&:hover fieldset': {\n      borderColor: 'white',\n    },\n    '&.Mui-focused fieldset': {\n      borderColor: 'green',\n    },\n  },\n})\n\nexport const useStyles = makeStyles({\n  link: {\n    color: '#ffffff',\n    display: 'flex',\n    alignItems: 'right',\n    textDecoration: 'underline',\n    '&:hover': {\n      color: '#000000',\n    },\n  },\n  icon: {\n    fontSize: 20,\n  },\n})\n\nasync function findAssociatedTokenAddress(\n  walletAddress: PublicKey,\n  tokenMintAddress: PublicKey\n): Promise<PublicKey> {\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        walletAddress.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        tokenMintAddress.toBuffer(),\n      ],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0]\n}\n\nexport const Arbitrage: FC = () => {\n  const { connection } = useConnection()\n  const { publicKey, sendTransaction } = useWallet()\n  const [loading, setLoading] = useState(false)\n  const [arbToken, setArbToken] = useState<ArbToken>('BANANA')\n  const [amount, setAmount] = useState<string>('')\n  const dispatch = useDispatch()\n  const arbTransactionSignature = useSelector(getArbTransactionSignature)\n  const styles = useStyles()\n  const notify = useNotify()\n\n  function handleSetAmount(ev: React.ChangeEvent<HTMLInputElement>) {\n    if (validNumericTrailingCharCheck(ev.target.value)) {\n      setAmount(validNumericTrailingCharCheck(ev.target.value))\n    } else if (ev.target.value === '') {\n      setAmount('')\n    }\n  }\n\n  const changeArbDirection = useCallback(() => {\n    setAmount('')\n    if (arbToken === 'BANANA') {\n      setArbToken('KONG')\n    } else {\n      setArbToken('BANANA')\n    }\n  }, [arbToken])\n\n  const arbitrageBananas = useCallback(async () => {\n    if (!publicKey) {\n      notify('error', 'Wallet not connected!')\n      return\n    }\n    setLoading(true)\n\n    let signature: TransactionSignature = ''\n    try {\n      let dataLayout = struct([u8('instruction'), nu64('lamports')])\n      const data = Buffer.alloc(dataLayout.span)\n      dataLayout.encode(\n        {\n          instruction: 3,\n          lamports: getCollateralAsNumber(amount) * LAMPORTS_PER_SOL,\n        },\n        data\n      )\n\n      const kongATA = await findAssociatedTokenAddress(publicKey, KONG_MINT)\n      const kongMintAuthority = await PublicKey.findProgramAddress(\n        [\n          PROGRAM_STATE_ACCOUNT.toBuffer(),\n          Buffer.from(KONG_MINT_AUTHORITY_SEED),\n        ],\n        RAD_ID\n      )\n\n      const bananaATA = await findAssociatedTokenAddress(publicKey, BANANA_MINT)\n\n      const transactionItems = []\n\n      // check if ataAccountExists\n      const ataAccountInfo = await connection.getAccountInfo(\n        kongATA,\n        'finalized'\n      )\n\n      if (!ataAccountInfo) {\n        let dataLayoutATA = struct([u8('instruction')])\n        const ataData = Buffer.alloc(dataLayoutATA.span)\n        dataLayoutATA.encode(\n          {\n            instruction: 0,\n          },\n          ataData\n        )\n        transactionItems.push(\n          new TransactionInstruction({\n            keys: [\n              { pubkey: publicKey, isSigner: false, isWritable: true },\n              { pubkey: kongATA, isSigner: false, isWritable: true },\n              { pubkey: publicKey, isSigner: false, isWritable: false },\n              {\n                pubkey: KONG_MINT,\n                isSigner: false,\n                isWritable: false,\n              },\n              { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\n              { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n              { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n            ],\n            programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n            data: ataData,\n          })\n        )\n      }\n\n      transactionItems.push(\n        new TransactionInstruction({\n          keys: [\n            {\n              pubkey: PROGRAM_STATE_ACCOUNT,\n              isSigner: false,\n              isWritable: false,\n            },\n            { pubkey: bananaATA, isSigner: false, isWritable: true },\n            { pubkey: kongATA, isSigner: false, isWritable: true },\n            { pubkey: BANANA_MINT, isSigner: false, isWritable: true },\n            {\n              pubkey: publicKey,\n              isSigner: true,\n              isWritable: false,\n            },\n            { pubkey: KONG_MINT, isSigner: false, isWritable: true },\n            {\n              pubkey: kongMintAuthority[0],\n              isSigner: false,\n              isWritable: false,\n            },\n            { pubkey: KONG_ORACLE_PRODUCT, isSigner: false, isWritable: false },\n            { pubkey: KONG_ORACLE_PRICE, isSigner: false, isWritable: false },\n            { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n          ],\n          programId: RAD_ID,\n          data,\n        })\n      )\n\n      const walletBalance = await connection.getTokenAccountBalance(bananaATA)\n      const walletBalanceBananas = walletBalance.value.uiAmount\n      if (\n        walletBalanceBananas !== null &&\n        walletBalanceBananas < getCollateralAsNumber(amount)\n      ) {\n        throw Error(\n          `Insufficient wallet balance of ${walletBalanceBananas.toFixed(\n            5\n          )} Bananas for transaction of ${amount} Bananas.`\n        )\n      }\n\n      notify('info', 'Burn Request Approval Needed')\n      const signers: Signer[] = []\n\n      signature = await sendTransaction(\n        new Transaction().add(...transactionItems),\n        connection,\n        {\n          signers: signers,\n        }\n      )\n      notify('info', 'Transaction sent:', signature)\n      dispatch(setArbTransactionSignature(signature))\n\n      await connection.confirmTransaction(signature, 'processed')\n      notify('success', 'Transaction successful!', signature)\n      setLoading(false)\n      setAmount('')\n    } catch (error: any) {\n      setLoading(false)\n      dispatch(setArbTransactionSignature())\n      notify('error', `Transaction failed! ${error?.message}`, signature)\n      return\n    }\n  }, [dispatch, amount, connection, notify, publicKey, sendTransaction])\n\n  const arbitrageKong = useCallback(async () => {\n    if (!publicKey) {\n      notify('error', 'Wallet not connected!')\n      return\n    }\n    setLoading(true)\n\n    let signature: TransactionSignature = ''\n    try {\n      let dataLayout = struct([u8('instruction'), nu64('lamports')])\n      const data = Buffer.alloc(dataLayout.span)\n      dataLayout.encode(\n        {\n          instruction: 2,\n          lamports: getCollateralAsNumber(amount) * LAMPORTS_PER_SOL,\n        },\n        data\n      )\n\n      const kongATA = await findAssociatedTokenAddress(publicKey, KONG_MINT)\n\n      const bananaATA = await findAssociatedTokenAddress(publicKey, BANANA_MINT)\n      const bananaMintAuthority = await PublicKey.findProgramAddress(\n        [\n          PROGRAM_STATE_ACCOUNT.toBuffer(),\n          Buffer.from(BANANA_MINT_AUTHORITY_SEED),\n        ],\n        RAD_ID\n      )\n\n      const transactionItems = []\n\n      // check if ataAccountExists\n      const ataAccountInfo = await connection.getAccountInfo(\n        bananaATA,\n        'finalized'\n      )\n\n      if (!ataAccountInfo) {\n        let dataLayoutATA = struct([u8('instruction')])\n        const ataData = Buffer.alloc(dataLayoutATA.span)\n        dataLayoutATA.encode(\n          {\n            instruction: 0,\n          },\n          ataData\n        )\n        transactionItems.push(\n          new TransactionInstruction({\n            keys: [\n              { pubkey: publicKey, isSigner: false, isWritable: true },\n              { pubkey: bananaATA, isSigner: false, isWritable: true },\n              { pubkey: publicKey, isSigner: false, isWritable: false },\n              {\n                pubkey: BANANA_MINT,\n                isSigner: false,\n                isWritable: false,\n              },\n              { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\n              { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n              { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n            ],\n            programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n            data: ataData,\n          })\n        )\n      }\n\n      transactionItems.push(\n        new TransactionInstruction({\n          keys: [\n            {\n              pubkey: PROGRAM_STATE_ACCOUNT,\n              isSigner: false,\n              isWritable: false,\n            },\n            { pubkey: kongATA, isSigner: false, isWritable: true },\n            { pubkey: bananaATA, isSigner: false, isWritable: true },\n            { pubkey: KONG_MINT, isSigner: false, isWritable: true },\n            {\n              pubkey: publicKey,\n              isSigner: true,\n              isWritable: false,\n            },\n            { pubkey: BANANA_MINT, isSigner: false, isWritable: true },\n            {\n              pubkey: bananaMintAuthority[0],\n              isSigner: false,\n              isWritable: false,\n            },\n            { pubkey: KONG_ORACLE_PRODUCT, isSigner: false, isWritable: false },\n            { pubkey: KONG_ORACLE_PRICE, isSigner: false, isWritable: false },\n            { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n          ],\n          programId: RAD_ID,\n          data,\n        })\n      )\n\n      const walletBalance = await connection.getTokenAccountBalance(kongATA)\n      const walletBalanceKONG = walletBalance.value.uiAmount\n      if (\n        walletBalanceKONG !== null &&\n        walletBalanceKONG < getCollateralAsNumber(amount)\n      ) {\n        throw Error(\n          `Insufficient wallet balance of ${walletBalanceKONG.toFixed(\n            5\n          )} Kong for transaction of ${amount} Kong.`\n        )\n      }\n\n      notify('info', 'Burn Request Approval Needed')\n      const signers: Signer[] = []\n\n      signature = await sendTransaction(\n        new Transaction().add(...transactionItems),\n        connection,\n        {\n          signers: signers,\n        }\n      )\n      notify('info', 'Transaction sent:', signature)\n      dispatch(setArbTransactionSignature(signature))\n\n      await connection.confirmTransaction(signature, 'processed')\n      notify('success', 'Transaction successful!', signature)\n      setLoading(false)\n      setAmount('')\n    } catch (error: any) {\n      setLoading(false)\n      dispatch(setArbTransactionSignature())\n      notify('error', `Transaction failed! ${error?.message}`, signature)\n      return\n    }\n  }, [dispatch, amount, connection, notify, publicKey, sendTransaction])\n\n  const maxBananas = useCallback(async () => {\n    if (!publicKey) {\n      notify('error', 'Wallet not connected!')\n      return\n    }\n\n    try {\n      const bananaATA = await findAssociatedTokenAddress(publicKey, BANANA_MINT)\n      const walletBalance = await connection.getTokenAccountBalance(bananaATA)\n      const walletBalanceBananas = walletBalance.value.uiAmount\n      walletBalanceBananas !== null &&\n        setAmount(walletBalanceBananas.toString())\n\n      notify('success', 'Set Bananas to MAX of: ' + walletBalanceBananas)\n    } catch (error: any) {\n      notify('error', `Failed to fetch Banana balance ${error?.message}`)\n      return\n    }\n  }, [notify, connection, publicKey])\n\n  const maxKong = useCallback(async () => {\n    if (!publicKey) {\n      notify('error', 'Wallet not connected!')\n      return\n    }\n\n    try {\n      const kongATA = await findAssociatedTokenAddress(publicKey, KONG_MINT)\n      const walletBalance = await connection.getTokenAccountBalance(kongATA)\n      const walletBalanceKong = walletBalance.value.uiAmount\n      walletBalanceKong !== null && setAmount(walletBalanceKong.toString())\n\n      notify('success', 'Set Kong to MAX of: ' + walletBalanceKong)\n    } catch (error: any) {\n      notify('error', `Failed to fetch Banana balance ${error?.message}`)\n      return\n    }\n  }, [notify, connection, publicKey])\n\n  if (arbToken === 'BANANA') {\n    return (\n      <div className=\"Arbitrage-outter-container\">\n        <div className=\"Arbitrage-container\">\n          <Typography\n            id=\"modal-modal-title\"\n            variant=\"h6\"\n            component=\"h2\"\n            align={'center'}\n            color={'white'}\n          >\n            BANANA / KONG\n          </Typography>\n          <br />\n\n          <div className=\"Div-relative-container  \">\n            <CssTextField\n              variant=\"outlined\"\n              autoFocus={true}\n              fullWidth={true}\n              type={'text'}\n              value={amount}\n              onChange={handleSetAmount.bind(this)}\n              label=\"Bananas to Burn for Kong\"\n              id=\"banana-amount\"\n            />\n\n            <Button\n              variant={'outlined'}\n              color={'success'}\n              className=\"Input-max-button\"\n              onClick={maxBananas}\n            >\n              max\n            </Button>\n          </div>\n          <br />\n          <br />\n          <Button\n            variant={'contained'}\n            color={'warning'}\n            onClick={changeArbDirection}\n            className=\"Arb-change-direction-button\"\n          >\n            Change Burn Direction\n          </Button>\n          <br />\n          <br />\n          <ArbBananasEstimate amount={amount} />\n          <br />\n          <br />\n          <Box sx={{ flexGrow: 1 }}>\n            <Grid container spacing={2}>\n              <Grid item xs={10}>\n                <Typography\n                  id=\"modal-modal-title\"\n                  variant=\"caption\"\n                  component=\"h2\"\n                  align={'left'}\n                  color={'white'}\n                >\n                  Slippage Tolerance\n                  <Tooltip\n                    title=\"The maximum difference between your estimated price and execution price.\"\n                    placement=\"right\"\n                  >\n                    <HelpOutlineIcon\n                      style={{\n                        position: 'relative',\n                        marginLeft: '2px',\n                        top: '5px',\n                      }}\n                      fontSize=\"small\"\n                      color={'primary'}\n                    />\n                  </Tooltip>\n                </Typography>\n              </Grid>\n              <Grid item xs={2}>\n                <Typography\n                  id=\"modal-modal-title\"\n                  variant=\"caption\"\n                  component=\"h2\"\n                  align={'right'}\n                  color={'white'}\n                  style={{ position: 'relative', top: '5px' }}\n                >\n                  0.5%\n                </Typography>\n              </Grid>\n            </Grid>\n          </Box>\n          <br />\n          {loading ? (\n            <Box sx={{ flexGrow: 1 }}>\n              <Grid container spacing={2}>\n                <Grid item xs={7}>\n                  <CircularProgress color=\"success\" />\n                </Grid>\n                <Grid item xs={5}>\n                  {arbTransactionSignature && (\n                    <Link\n                      className={styles.link}\n                      href={`https://explorer.solana.com/tx/${arbTransactionSignature}?cluster=${WALLET_ADAPTER_NETWORK}`}\n                      target=\"_blank\"\n                      align=\"right\"\n                    >\n                      Transaction\n                      <LaunchIcon className={styles.icon} />\n                    </Link>\n                  )}\n                </Grid>\n              </Grid>\n            </Box>\n          ) : (\n            <>\n              <Button onClick={arbitrageBananas} variant={'contained'}>\n                Burn Bananas for Kong\n              </Button>\n            </>\n          )}\n          <br />\n          <br />\n        </div>\n      </div>\n    )\n  } else {\n    return (\n      <div className=\"Arbitrage-outter-container\">\n        <div className=\"Arbitrage-container\">\n          <Typography\n            id=\"modal-modal-title\"\n            variant=\"h6\"\n            component=\"h2\"\n            align={'center'}\n            color={'white'}\n          >\n            KONG / BANANA\n          </Typography>\n          <br />\n          <div className=\"Div-relative-container  \">\n            <CssTextField\n              variant=\"outlined\"\n              autoFocus={true}\n              fullWidth={true}\n              type={'text'}\n              value={amount}\n              onChange={handleSetAmount.bind(this)}\n              label=\"Kong to Burn for Bananas\"\n              id=\"kong-amount\"\n            />\n            <Button\n              variant={'outlined'}\n              color={'success'}\n              className=\"Input-max-button\"\n              onClick={maxKong}\n            >\n              max\n            </Button>\n          </div>\n          <br />\n          <br />\n          <Button\n            variant={'contained'}\n            color={'warning'}\n            onClick={changeArbDirection}\n            className=\"Arb-change-direction-button\"\n          >\n            Change Burn Direction\n          </Button>\n          <br />\n          <br />\n          <ArbKongEstimate amount={amount} />\n          <br />\n          <br />\n          <Box sx={{ flexGrow: 1 }}>\n            <Grid container spacing={2}>\n              <Grid item xs={10}>\n                <Typography\n                  id=\"modal-modal-title\"\n                  variant=\"caption\"\n                  component=\"h2\"\n                  align={'left'}\n                  color={'white'}\n                >\n                  Slippage Tolerance\n                  <Tooltip\n                    title=\"The maximum difference between your estimated price and execution price.\"\n                    placement=\"right\"\n                  >\n                    <HelpOutlineIcon\n                      style={{\n                        position: 'relative',\n                        marginLeft: '2px',\n                        top: '5px',\n                      }}\n                      fontSize=\"small\"\n                      color={'primary'}\n                    />\n                  </Tooltip>\n                </Typography>\n              </Grid>\n              <Grid item xs={2}>\n                <Typography\n                  id=\"modal-modal-title\"\n                  variant=\"caption\"\n                  component=\"h2\"\n                  align={'right'}\n                  color={'white'}\n                  style={{ position: 'relative', top: '5px' }}\n                >\n                  0.5%\n                </Typography>\n              </Grid>\n            </Grid>\n          </Box>\n          <br />\n          {loading ? (\n            <Box sx={{ flexGrow: 1 }}>\n              <Grid container spacing={2}>\n                <Grid item xs={7}>\n                  <CircularProgress color=\"success\" />\n                </Grid>\n                <Grid item xs={5}>\n                  {arbTransactionSignature && (\n                    <Link\n                      className={styles.link}\n                      href={`https://explorer.solana.com/tx/${arbTransactionSignature}?cluster=${WALLET_ADAPTER_NETWORK}`}\n                      target=\"_blank\"\n                      align=\"right\"\n                    >\n                      Transaction\n                      <LaunchIcon className={styles.icon} />\n                    </Link>\n                  )}\n                </Grid>\n              </Grid>\n            </Box>\n          ) : (\n            <>\n              <Button onClick={arbitrageKong} variant={'contained'}>\n                Burn Kong for Bananas\n              </Button>\n            </>\n          )}\n          <br />\n          <br />\n        </div>\n      </div>\n    )\n  }\n}\n","import { FC } from 'react'\nimport { useSelector } from 'react-redux'\nimport { getOraclePrices } from '../../redux/modules/app'\nimport { calculateArbAmount, getCollateralAsNumber } from '../../utils/helpers'\nimport { CssTextField } from '../OpenLoan/OpenLoan'\n\ninterface propsState {\n  amount: string\n}\n\nexport const ArbBananasEstimate: FC<propsState> = (props) => {\n  const oraclePrices = useSelector(getOraclePrices)\n\n  return (\n    <CssTextField\n      variant=\"outlined\"\n      fullWidth={true}\n      type={'text'}\n      label=\"Est. KONG Received\"\n      id=\"loan-amount\"\n      value={calculateArbAmount(\n        getCollateralAsNumber(props.amount),\n        oraclePrices.KONG_USD,\n        'BANANA'\n      )}\n    />\n  )\n}\n","import { FC } from 'react'\nimport { useSelector } from 'react-redux'\nimport { getOraclePrices } from '../../redux/modules/app'\nimport { calculateLoanAmount, getCollateralAsNumber } from '../../utils/helpers'\nimport { CssTextField } from '../OpenLoan/OpenLoan'\n\ninterface propsState {\n  collateral: string\n}\n\nexport const LoanAmountEstimate: FC<propsState> = (props) => {\n  const oraclePrices = useSelector(getOraclePrices)\n\n  return (\n    <CssTextField\n      variant=\"outlined\"\n      fullWidth={true}\n      type={'text'}\n      label=\"Est. Loan Amount\"\n      id=\"loan-amount\"\n      value={calculateLoanAmount(\n        getCollateralAsNumber(props.collateral),\n        oraclePrices.SOL_USD\n      )}\n    />\n  )\n}\n","import { FC } from 'react'\nimport { useSelector } from 'react-redux'\nimport { getOraclePrices } from '../../redux/modules/app'\nimport {\n  calculateArbAmountKong,\n  getCollateralAsNumber,\n} from '../../utils/helpers'\nimport { CssTextField } from '../OpenLoan/OpenLoan'\n\ninterface propsState {\n  amount: string\n}\n\nexport const ArbKongEstimate: FC<propsState> = (props) => {\n  const oraclePrices = useSelector(getOraclePrices)\n\n  return (\n    <CssTextField\n      variant=\"outlined\"\n      fullWidth={true}\n      type={'text'}\n      label=\"Est. BANANA Received\"\n      id=\"loan-amount\"\n      value={calculateArbAmountKong(\n        getCollateralAsNumber(props.amount),\n        oraclePrices.KONG_USD,\n        'KONG'\n      )}\n    />\n  )\n}\n","import { typedAction } from '../helpers'\nimport { AppState, OraclePrices, WindowSize } from '../../types'\nimport produce from 'immer'\nimport { RootState } from '..'\n\nconst initialState: AppState = {\n  screen: {\n    windowHeight: 0,\n    windowWidth: 0,\n  },\n  oraclePrices: {\n    SOL_USD: null,\n    BANANA_USD: null,\n    KONG_USD: null,\n    timer: null,\n  },\n  tab: 0,\n}\n\n// DISPATCHES\nexport const setScreen = (screen: WindowSize) => {\n  return typedAction('app/SET_SCREEN', {\n    screen: screen,\n  })\n}\n\nexport const setArbTransactionSignature = (\n  arbTransactionSignature?: string\n) => {\n  return typedAction('app/SET_ARB_TRANSACTION_SIGNATURE', {\n    arbTransactionSignature: arbTransactionSignature,\n  })\n}\n\nexport const setOraclePrices = (price: OraclePrices) => {\n  return typedAction('app/SET_ORACLE_PRICES', {\n    SOL_USD: price.SOL_USD,\n    BANANA_USD: price.BANANA_USD,\n    KONG_USD: price.KONG_USD,\n  })\n}\n\nexport const setOracleTimer = (oracleTimer: NodeJS.Timer | null) => {\n  return typedAction('app/SET_ORACLE_TIMER', {\n    oracleTimer: oracleTimer,\n  })\n}\n\nexport const setTab = (tab: number) => {\n  return typedAction('app/SET_TAB', {\n    tab: tab,\n  })\n}\n\ntype AppStateAction = ReturnType<\n  | typeof setScreen\n  | typeof setArbTransactionSignature\n  | typeof setOraclePrices\n  | typeof setOracleTimer\n  | typeof setTab\n>\n\n// REDUCER\nexport function appReducer(\n  state: AppState = initialState,\n  action: AppStateAction\n): AppState {\n  switch (action.type) {\n    case 'app/SET_SCREEN':\n      return produce(state, (draftState: AppState) => {\n        draftState.screen = action.payload.screen\n      })\n    case 'app/SET_ARB_TRANSACTION_SIGNATURE':\n      return produce(state, (draftState: AppState) => {\n        draftState.arbTransactionSignature =\n          action.payload.arbTransactionSignature\n      })\n    case 'app/SET_TAB':\n      return produce(state, (draftState: AppState) => {\n        draftState.tab = action.payload.tab\n      })\n    case 'app/SET_ORACLE_PRICES':\n      return produce(state, (draftState: AppState) => {\n        draftState.oraclePrices.SOL_USD = action.payload.SOL_USD\n        draftState.oraclePrices.BANANA_USD = action.payload.BANANA_USD\n        draftState.oraclePrices.KONG_USD = action.payload.KONG_USD\n      })\n    case 'app/SET_ORACLE_TIMER':\n      return produce(state, (draftState: AppState) => {\n        if (draftState.oraclePrices.timer) {\n          clearInterval(draftState.oraclePrices.timer)\n        }\n        draftState.oraclePrices.timer = action.payload.oracleTimer\n      })\n    default:\n      return state\n  }\n}\n\n// SELECTORS\nexport const getScreen = (state: RootState) => state.app.screen\nexport const getArbTransactionSignature = (state: RootState) =>\n  state.app.arbTransactionSignature\nexport const getSelectedTab = (state: RootState) => state.app.tab\nexport const getOraclePrices = (state: RootState) => state.app.oraclePrices\n","import { typedAction } from '../helpers'\nimport { LoansList, LoansState, NotifyFunction } from '../../types'\nimport produce from 'immer'\nimport { RootState } from '..'\nimport { PublicKey } from '@solana/web3.js'\nimport { LOAN_LIST_SCANNER_TIMEOUT } from '../../utils/constants'\n\nconst initialState: LoansState = {\n  notify: null,\n  list: [],\n  openLoanTransactionSignature: null,\n  walletKey: null,\n  scan: false,\n  scanStartTime: null,\n  scanTimer: null,\n  openLoanModal: false,\n}\n\n// DISPATCHES\nexport const setLoansList = (\n  loans: LoansList[] | null,\n  walletKey: PublicKey | null\n) => {\n  return typedAction('loans/SET_LOAN_LIST', {\n    loans: loans,\n    walletKey: walletKey,\n  })\n}\n\nexport const setOpenLoanTransactionSignature = (\n  openLoanTransactionSignature: string | null\n) => {\n  return typedAction('loans/SET_OPEN_LOAN_TRANSACTION_SIGNATURE', {\n    openLoanTransactionSignature: openLoanTransactionSignature,\n  })\n}\n\nexport const setNotifier = (notify: NotifyFunction) => {\n  return typedAction('loans/SET_NOTIFIER', {\n    notify: notify,\n  })\n}\n\nexport const setScanForNewLoans = (scan: boolean) => {\n  return typedAction('loans/SET_LOAN_SCAN', {\n    scan: scan,\n  })\n}\n\nexport const setScanTimer = (\n  startTime: number | null,\n  scanTimer: NodeJS.Timer | null\n) => {\n  return typedAction('loans/SET_LOAN_SCAN_TIMER', {\n    scanStartTime: startTime,\n    scanTimer: scanTimer,\n  })\n}\n\nexport const checkTimeout = () => {\n  return typedAction('loans/CHECK_LOAN_SCAN_TIMEOUT')\n}\n\nexport const setOpenLoanModal = (open: boolean) => {\n  return typedAction('loans/SET_OPEN_LOAN_MODAL', {\n    openLoanModal: open,\n  })\n}\n\ntype LoansAction = ReturnType<\n  | typeof setLoansList\n  | typeof setScanForNewLoans\n  | typeof setScanTimer\n  | typeof checkTimeout\n  | typeof setNotifier\n  | typeof setOpenLoanModal\n  | typeof setOpenLoanTransactionSignature\n>\n\n// REDUCER\nexport function loansReducer(\n  state: LoansState = initialState,\n  action: LoansAction\n): LoansState {\n  switch (action.type) {\n    case 'loans/SET_LOAN_LIST':\n      return produce(state, (draftState: LoansState) => {\n        draftState.list = action.payload.loans\n        draftState.walletKey = action.payload.walletKey\n        draftState.scan = false\n        if (draftState.scanTimer) {\n          clearInterval(draftState.scanTimer)\n          draftState.scanStartTime = null\n          draftState.scanTimer = null\n        }\n      })\n    case 'loans/SET_OPEN_LOAN_TRANSACTION_SIGNATURE':\n      return produce(state, (draftState: LoansState) => {\n        draftState.openLoanTransactionSignature =\n          action.payload.openLoanTransactionSignature\n      })\n    case 'loans/SET_NOTIFIER':\n      return produce(state, (draftState: LoansState) => {\n        draftState.notify = action.payload.notify\n      })\n    case 'loans/CHECK_LOAN_SCAN_TIMEOUT':\n      return produce(state, (draftState: LoansState) => {\n        const currentTime = new Date().getTime()\n        if (\n          draftState.scanTimer &&\n          draftState.scanStartTime &&\n          currentTime - draftState.scanStartTime >\n            LOAN_LIST_SCANNER_TIMEOUT * 1000\n        ) {\n          draftState.notify &&\n            draftState.notify(\n              'warning',\n              'Timeout of ' +\n                LOAN_LIST_SCANNER_TIMEOUT +\n                ' Seconds Reached for Loan List Refresh'\n            )\n          clearInterval(draftState.scanTimer)\n          draftState.scanStartTime = null\n          draftState.scanTimer = null\n          draftState.scan = false\n        }\n      })\n    case 'loans/SET_LOAN_SCAN':\n      return produce(state, (draftState: LoansState) => {\n        draftState.scan = action.payload.scan\n      })\n    case 'loans/SET_LOAN_SCAN_TIMER':\n      return produce(state, (draftState: LoansState) => {\n        // CLEAR INTERVAL IF SETTING TO NULL\n        if (draftState.scanTimer && action.payload.scanTimer === null) {\n          clearInterval(draftState.scanTimer)\n        }\n        draftState.scanStartTime = action.payload.scanStartTime\n        draftState.scanTimer = action.payload.scanTimer\n      })\n    case 'loans/SET_OPEN_LOAN_MODAL':\n      return produce(state, (draftState: LoansState) => {\n        draftState.openLoanModal = action.payload.openLoanModal\n      })\n    default:\n      return state\n  }\n}\n\n// SELECTORS\nexport const getLoans = (state: RootState) => state.loans\nexport const getOpenLoanModal = (state: RootState) => state.loans.openLoanModal\nexport const getOpenLoanTransactionSignature = (state: RootState) =>\n  state.loans.openLoanTransactionSignature\n","export function typedAction<T extends string>(type: T): { type: T }\n\n// tslint:disable-next-line: no-any\nexport function typedAction<T extends string, P extends any>(\n  type: T,\n  payload: P\n): { type: T; payload: P }\n\n// tslint:disable-next-line: no-any\nexport function typedAction(type: string, payload?: any) {\n  return { type, payload }\n}\n","import { FC } from 'react'\nimport {\n  WalletModalProvider,\n  WalletMultiButton,\n} from '@solana/wallet-adapter-react-ui'\nimport { useWallet } from '@solana/wallet-adapter-react'\n\nexport const Wallet: FC = () => {\n  const { publicKey } = useWallet()\n\n  return (\n    <WalletModalProvider featuredWallets={4} logo={'/Bananas-90px.png'}>\n      <WalletMultiButton\n        children={publicKey ? null : 'Connect Wallet'}\n        className=\"Connect-wallet-button\"\n      />\n    </WalletModalProvider>\n  )\n}\n","import { FC } from 'react'\nimport Toolbar from '@mui/material/Toolbar'\nimport { AppBar, Box, Grid } from '@mui/material'\nimport { Wallet } from '../Wallet/Wallet'\nimport { NAV_BAR_SCREEN_MIN_WIDTH_FOR_WALLET_BUTTON } from '../../utils/constants'\nimport { useSelector } from 'react-redux'\nimport { getScreen } from '../../redux/modules/app'\n\nexport const NavBar: FC = () => {\n  const { windowWidth } = useSelector(getScreen)\n  const smallScreen = windowWidth < NAV_BAR_SCREEN_MIN_WIDTH_FOR_WALLET_BUTTON\n\n  return (\n    <AppBar position=\"static\" className=\"App-bar\">\n      <Toolbar variant=\"regular\">\n        <Box sx={{ flexGrow: 1 }}>\n          <Grid container spacing={2}>\n            <Grid item xs={smallScreen ? 6 : 9}>\n              <img src=\"/kong-logo.png\" alt=\"Kong\" className={'App-logo'} />\n            </Grid>\n            {smallScreen ? (\n              <Grid item xs={6}>\n                <div style={{ textAlign: 'right' }}>\n                  <Wallet />\n                </div>\n              </Grid>\n            ) : (\n              <Grid item xs={3}>\n                <div style={{ textAlign: 'right' }}>\n                  <Wallet />\n                </div>\n              </Grid>\n            )}\n          </Grid>\n        </Box>\n      </Toolbar>\n    </AppBar>\n  )\n}\n","import * as React from 'react'\nimport { createTheme, ThemeProvider } from '@mui/material/styles'\nimport AppBar from '@mui/material/AppBar'\nimport Tabs from '@mui/material/Tabs'\nimport Tab from '@mui/material/Tab'\nimport Box from '@mui/material/Box'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getSelectedTab, setTab } from '../../redux/modules/app'\n\nfunction a11yProps(index: number) {\n  return {\n    id: `full-width-tab-${index}`,\n    'aria-controls': `full-width-tabpanel-${index}`,\n  }\n}\n\nexport default function FullWidthTabs() {\n  const dispatch = useDispatch()\n  const selectedTab = useSelector(getSelectedTab)\n\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    dispatch(setTab(newValue))\n  }\n\n  const theme = createTheme({\n    components: {\n      MuiAppBar: {\n        styleOverrides: {\n          root: {\n            backgroundColor: 'transparent',\n          },\n        },\n      },\n      MuiTabs: {\n        styleOverrides: {\n          indicator: {\n            backgroundColor: 'yellow',\n          },\n        },\n      },\n    },\n  })\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Box sx={{ width: '100%' }}>\n        <AppBar position=\"static\">\n          <Tabs\n            value={selectedTab}\n            onChange={handleChange}\n            indicatorColor=\"secondary\"\n            textColor=\"inherit\"\n            variant=\"fullWidth\"\n            aria-label=\"full width tabs example\"\n          >\n            <Tab label=\"LOANS\" {...a11yProps(0)} />\n            <Tab label=\"ARBITRAGE\" {...a11yProps(1)} />\n          </Tabs>\n        </AppBar>\n      </Box>\n    </ThemeProvider>\n  )\n}\n","import { FC } from 'react'\nimport { useWallet } from '@solana/wallet-adapter-react'\nimport { Grid, Paper, styled } from '@mui/material'\nimport { Wallet } from '../Wallet/Wallet'\nimport { LoanList } from '../LoanList/LoanList'\nimport { useSelector } from 'react-redux'\nimport { getSelectedTab } from '../../redux/modules/app'\nimport Tabs from './Tabs'\nimport { Arbitrage } from '../Arbitrage/Arbitrage'\n\ninterface TabPanelProps {\n  children?: React.ReactNode\n  dir?: string\n  index: number\n  value: number\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`full-width-tabpanel-${index}`}\n      aria-labelledby={`full-width-tab-${index}`}\n      {...other}\n    >\n      <br />\n      {value === index && children}\n    </div>\n  )\n}\n\nexport const MainBox: FC = () => {\n  const { publicKey } = useWallet()\n  const selectedTab = useSelector(getSelectedTab)\n\n  const Item = styled(Paper)(({ theme }) => ({\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  }))\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      columns={16}\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <Grid item xs={12}>\n        <Item className={'App-center-box'}>\n          {publicKey ? (\n            <div>\n              <Tabs />\n              <TabPanel value={selectedTab} index={0}>\n                <LoanList />\n              </TabPanel>\n              <TabPanel value={selectedTab} index={1}>\n                <Arbitrage />\n              </TabPanel>\n            </div>\n          ) : (\n            <div className=\"Wallet-button-div-middle\">\n              <Wallet />\n            </div>\n          )}\n        </Item>\n      </Grid>\n    </Grid>\n  )\n}\n","import './OraclePrices.css'\nimport { FC, useEffect, useMemo, useRef } from 'react'\nimport { Grid, Typography } from '@mui/material'\nimport {\n  AccountType,\n  getPythProgramKeyForCluster,\n  parseBaseData,\n  parsePriceData,\n  parseProductData,\n  PriceData,\n  Product,\n} from '@pythnetwork/client'\nimport { PYTH_SOLANA_CLUSTER_NAME } from '../../utils/constants'\nimport {\n  AccountInfo,\n  clusterApiUrl,\n  Connection,\n  PublicKey,\n} from '@solana/web3.js'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  getOraclePrices,\n  setOraclePrices,\n  setOracleTimer,\n} from '../../redux/modules/app'\n\nexport const OraclePrices: FC = () => {\n  const oraclePrices = useSelector(getOraclePrices)\n  const dispatch = useDispatch()\n  const componentIsMounted = useRef(true)\n\n  const connection = useMemo(\n    () => new Connection(clusterApiUrl(PYTH_SOLANA_CLUSTER_NAME)),\n    []\n  )\n\n  const pythPublicKey = getPythProgramKeyForCluster(PYTH_SOLANA_CLUSTER_NAME)\n\n  useEffect(() => {\n    return () => {\n      componentIsMounted.current = false\n      dispatch(setOracleTimer(null))\n    }\n  }, [dispatch])\n\n  useEffect(() => {\n    async function getPrices() {\n      const accounts = await connection.getProgramAccounts(\n        pythPublicKey,\n        'finalized'\n      )\n      let productAccountKeyToProduct: Record<string, Product> = {}\n      let priceAccountKeyToProductAccountKey: Record<string, string> = {}\n      let marketToPriceData: Record<string, PriceData> = {}\n\n      function handleAccounts(\n        accounts: {\n          pubkey: PublicKey\n          account: AccountInfo<Buffer>\n        }[],\n        productOnly: boolean\n      ) {\n        for (const account of accounts) {\n          const base = parseBaseData(account.account.data)\n          if (base) {\n            switch (AccountType[base.type]) {\n              case 'Mapping':\n                break\n              case 'Product':\n                if (productOnly) {\n                  const { priceAccountKey, product } = parseProductData(\n                    account.account.data\n                  )\n                  productAccountKeyToProduct[account.pubkey.toString()] =\n                    product\n                  if (\n                    priceAccountKey.toString() !==\n                    '11111111111111111111111111111111'\n                  ) {\n                    priceAccountKeyToProductAccountKey[\n                      priceAccountKey.toString()\n                    ] = account.pubkey.toString()\n                  }\n                }\n                break\n              case 'Price':\n                if (!productOnly) {\n                  const productLookup =\n                    productAccountKeyToProduct[\n                      priceAccountKeyToProductAccountKey[\n                        account.pubkey.toString()\n                      ]\n                    ]\n                  if (productLookup) {\n                    const priceData = parsePriceData(account.account.data)\n                    marketToPriceData[productLookup.symbol] = priceData\n                  }\n                }\n                break\n              case 'Test':\n                break\n              default:\n                throw new Error(\n                  `Unknown account type: ${base.type}. Try upgrading pyth-client.`\n                )\n            }\n          }\n        }\n      }\n\n      marketToPriceData = {}\n      handleAccounts(accounts, true)\n      handleAccounts(accounts, false)\n\n      if (marketToPriceData) {\n        dispatch(\n          setOraclePrices({\n            SOL_USD: marketToPriceData['SOL/USD'],\n            BANANA_USD: marketToPriceData['USDC/USD'],\n            KONG_USD: marketToPriceData['ETH/USD'],\n          })\n        )\n      }\n    }\n\n    if (!oraclePrices.timer) {\n      if (!oraclePrices.SOL_USD) {\n        getPrices()\n      }\n      dispatch(setOracleTimer(setInterval(() => getPrices(), 5000)))\n    }\n  })\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={4}>\n        <Typography component=\"div\" className=\"Oracle-price-text\">\n          BANANA/USD\n          <br />\n          {oraclePrices.BANANA_USD\n            ? '$' + oraclePrices.BANANA_USD?.price.toFixed(2)\n            : ''}\n        </Typography>\n      </Grid>\n      <Grid item xs={4}>\n        <Typography component=\"div\" className=\"Oracle-price-text\">\n          SOL/USD\n          <br />\n          {oraclePrices.SOL_USD\n            ? '$' + oraclePrices.SOL_USD?.price.toFixed(2)\n            : 'Loading ...'}\n        </Typography>\n      </Grid>\n      <Grid item xs={4}>\n        <Typography component=\"div\" className=\"Oracle-price-text\">\n          KONG/USD\n          <br />\n          {oraclePrices.KONG_USD\n            ? '$' + oraclePrices.KONG_USD?.price.toFixed(2)\n            : ''}\n        </Typography>\n      </Grid>\n    </Grid>\n  )\n}\n","import './BottomBar.css'\nimport { FC } from 'react'\nimport Paper from '@mui/material/Paper'\nimport { Box, Divider, Toolbar, Typography } from '@mui/material'\nimport { OraclePrices } from '../OraclePrices/OraclePrices'\n\nexport const BottomBar: FC = () => {\n  return (\n    <>\n      <div className=\"Bottom-spacer-hidden\" />\n      <Paper elevation={3} className=\"Bottom-bar\">\n        <Divider orientation=\"horizontal\" flexItem className={'App-divider'} />\n        <Toolbar variant=\"regular\">\n          <Box sx={{ flexGrow: 1 }}>\n            <OraclePrices />\n          </Box>\n        </Toolbar>\n        <Toolbar className=\"Bottom-bar-notification\" variant=\"regular\">\n          <Box sx={{ flexGrow: 1 }}>\n            <Typography\n              component=\"div\"\n              className=\"Bottom-bar-notification-text\"\n            >\n              THIS IS RUNNING ON DEVNET\n              <br />\n            </Typography>\n          </Box>\n        </Toolbar>\n      </Paper>\n    </>\n  )\n}\n","import './Home.css'\nimport { FC, useMemo } from 'react'\nimport { WALLET_ADAPTER_NETWORK } from '../../utils/wallet-config'\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from '@solana/wallet-adapter-react'\nimport {\n  getLedgerWallet,\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletExtensionWallet,\n  getSolletWallet,\n} from '@solana/wallet-adapter-wallets'\nimport { NavBar } from '../NavBar/NavBar'\nimport { Divider } from '@mui/material'\nimport { MainBox } from '../MainBox/MainBox'\nimport { clusterApiUrl } from '@solana/web3.js'\nimport { OpenLoan } from '../OpenLoan/OpenLoan'\nimport { WalletError } from '@solana/wallet-adapter-base'\nimport { useNotify } from '../../utils/notify'\nimport { BottomBar } from '../BottomBar/BottomBar'\n\nexport const Home: FC = () => {\n  const notify = useNotify()\n\n  const network = WALLET_ADAPTER_NETWORK\n\n  // You can also provide a custom RPC endpoint\n  const endpoint = useMemo(() => clusterApiUrl(network), [network])\n\n  // const endpoint = 'http://localhost:8899/'\n\n  // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\n  // Only the wallets you configure here will be compiled into your application\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSlopeWallet(),\n      getSolflareWallet(),\n      getLedgerWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    [network]\n  )\n\n  function handleWalletError(e: WalletError) {\n    notify('error', `Wallet Error: ${e.message}`)\n  }\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider\n        onError={(e: WalletError) => handleWalletError(e)}\n        wallets={wallets}\n        autoConnect\n      >\n        <NavBar />\n        <Divider orientation=\"horizontal\" flexItem className={'App-divider'} />\n        <OpenLoan />\n        <p>\n          <br />\n        </p>\n        <MainBox />\n        <BottomBar />\n      </WalletProvider>\n    </ConnectionProvider>\n  )\n}\n","import './App.css'\nimport { SnackbarProvider } from 'notistack'\nimport { Home } from '../Home/Home'\nimport { FC, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { setScreen } from '../../redux/modules/app'\n\nexport const App: FC = () => {\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    const handler = () => {\n      dispatch(\n        setScreen({\n          windowWidth: window.innerWidth,\n          windowHeight: window.innerHeight,\n        })\n      )\n    }\n\n    // Set size at the first client-side load\n    handler()\n\n    window.addEventListener('resize', handler)\n\n    // Remove event listener on cleanup\n    return () => {\n      window.removeEventListener('resize', handler)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return (\n    <SnackbarProvider maxSnack={5}>\n      <Home />\n    </SnackbarProvider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux'\nimport { appReducer } from './modules/app'\nimport { loansReducer } from './modules/loans'\n\nexport const rootReducer = combineReducers({\n  app: appReducer,\n  loans: loansReducer,\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './Components/App/App'\nimport reportWebVitals from './reportWebVitals'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport { rootReducer } from './redux'\n\nexport const store = createStore(rootReducer)\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import { Link, makeStyles } from '@material-ui/core'\nimport LaunchIcon from '@material-ui/icons/Launch'\nimport { useSnackbar, VariantType } from 'notistack'\nimport { useCallback } from 'react'\nimport { WALLET_ADAPTER_NETWORK } from './wallet-config'\n\nconst useStyles = makeStyles({\n  notification: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  link: {\n    color: '#ffffff',\n    display: 'flex',\n    alignItems: 'center',\n    marginLeft: 16,\n    textDecoration: 'underline',\n    '&:hover': {\n      color: '#000000',\n    },\n  },\n  icon: {\n    fontSize: 20,\n    marginLeft: 8,\n  },\n})\n\nexport function useNotify() {\n  const styles = useStyles()\n  const { enqueueSnackbar } = useSnackbar()\n\n  return useCallback(\n    (variant: VariantType, message: string, signature?: string) => {\n      enqueueSnackbar(\n        <span className={styles.notification}>\n          {message}\n          {signature && (\n            <Link\n              className={styles.link}\n              href={`https://explorer.solana.com/tx/${signature}?cluster=${WALLET_ADAPTER_NETWORK}`}\n              target=\"_blank\"\n            >\n              Transaction\n              <LaunchIcon className={styles.icon} />\n            </Link>\n          )}\n        </span>,\n        { variant }\n      )\n    },\n    [enqueueSnackbar, styles]\n  )\n}\n","import { WalletAdapterNetwork } from '@solana/wallet-adapter-base'\n\nexport const WALLET_ADAPTER_NETWORK = WalletAdapterNetwork.Devnet\n","import { useConnection, useWallet } from '@solana/wallet-adapter-react'\nimport {\n  Keypair,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  Signer,\n  SystemProgram,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n} from '@solana/web3.js'\nimport { deserializeUnchecked } from 'borsh'\nimport { u8, nu64, struct } from '@solana/buffer-layout'\nimport { FC, useCallback, useState } from 'react'\nimport {\n  BANANA_MINT,\n  BANANA_MINT_AUTHORITY_SEED,\n  KONG_LOAN_ACCOUNT_SIZE,\n  MARINADE_STATE_ID,\n  MSOL_LEG,\n  MSOL_LEG_AUTHORITY_INFO,\n  MSOL_MINT,\n  MSOL_MINT_AUTH,\n  PROGRAM_STATE_ACCOUNT,\n  PROGRAM_VAULT_SEED,\n  RAD_ID,\n  RENT_PROGRAM_ID,\n  RESERVE_PDA_INFO,\n  SOLANA_TOKEN_ID,\n  SOL_LEG,\n  SOL_ORACLE_PRICE,\n  SOL_ORACLE_PRODUCT,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  SYSTEM_PROGRAM_ID,\n  MARINADE_PROGRAM_ID,\n} from '../../utils/constants'\nimport { WALLET_ADAPTER_NETWORK } from '../../utils/wallet-config'\nimport LaunchIcon from '@material-ui/icons/Launch'\nimport {\n  Backdrop,\n  Box,\n  Button,\n  Fade,\n  Modal,\n  styled,\n  TextField,\n  Typography,\n  Tooltip,\n  Grid,\n  CircularProgress,\n  Link,\n} from '@mui/material'\nimport { makeStyles } from '@material-ui/core'\nimport ArrowDropDownCircleSharpIcon from '@mui/icons-material/ArrowDropDownCircleSharp'\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useNotify } from '../../utils/notify'\nimport {\n  getOpenLoanModal,\n  getOpenLoanTransactionSignature,\n  setOpenLoanModal,\n  setOpenLoanTransactionSignature,\n  setScanForNewLoans,\n} from '../../redux/modules/loans'\nimport {\n  format5Dec,\n  getCollateralAsNumber,\n  numLamportsToSol,\n  validNumericTrailingCharCheck,\n} from '../../utils/helpers'\nimport { LoanAmountEstimate } from '../LoanAmountEstimate/LoanAmountEstimate'\nimport { WalletSendTransactionError } from '@solana/wallet-adapter-base'\nimport { TOKEN_PROGRAM_ID, Token, AccountLayout } from '@solana/spl-token'\nimport * as marinade from '../../utils/marinade-state'\n\nexport const CssTextField = styled(TextField)({\n  '& label.MuiInputLabel': {\n    color: 'white',\n  },\n  '& label.MuiInputLabel-root': {\n    color: 'white',\n  },\n  '& label.Mui-focused': {\n    color: 'white',\n  },\n  '& .MuiInput-underline:after': {\n    borderBottomColor: 'green',\n  },\n  '& .MuiInputBase-root': {\n    color: 'white',\n    backgroundColor: 'transparent',\n  },\n  '& .MuiOutlinedInput-root': {\n    '& fieldset': {\n      borderColor: 'green',\n    },\n    '&:hover fieldset': {\n      borderColor: 'white',\n    },\n    '&.Mui-focused fieldset': {\n      borderColor: 'green',\n    },\n  },\n})\n\nexport const useStyles = makeStyles({\n  link: {\n    color: '#ffffff',\n    display: 'flex',\n    alignItems: 'right',\n    textDecoration: 'underline',\n    '&:hover': {\n      color: '#000000',\n    },\n  },\n  icon: {\n    fontSize: 20,\n  },\n})\n\nasync function findAssociatedTokenAddress(\n  walletAddress: PublicKey,\n  tokenMintAddress: PublicKey\n): Promise<PublicKey> {\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        walletAddress.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        tokenMintAddress.toBuffer(),\n      ],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0]\n}\n\nexport const OpenLoan: FC = () => {\n  const { connection } = useConnection()\n  const { publicKey, sendTransaction } = useWallet()\n  const [collateral, setCollateral] = useState('')\n  const [loading, setLoading] = useState(false)\n  const dispatch = useDispatch()\n  const notify = useNotify()\n  const open = useSelector(getOpenLoanModal)\n  const openLoanTransactionSignature = useSelector(\n    getOpenLoanTransactionSignature\n  )\n  const styles = useStyles()\n\n  const handleClose = useCallback(\n    () => dispatch(setOpenLoanModal(false)),\n    [dispatch]\n  )\n\n  if (!publicKey) {\n    dispatch(setOpenLoanModal(false))\n  }\n\n  const maxAmountToStake = (\n    nativeSOLBalance: number,\n    totalStaked: number,\n    transactionFee: number,\n    marinadeState: marinade.State\n  ) => {\n    const stakingSolCap =\n      marinadeState.staking_sol_cap &&\n      Number(\n        format5Dec(Number(marinadeState.staking_sol_cap), LAMPORTS_PER_SOL)\n      )\n\n    const extraAmountToKeep =\n      transactionFee * 4 + marinadeState.rent_exempt_for_token_acc.toNumber()\n\n    const fillCap =\n      totalStaked &&\n      marinadeState.staking_sol_cap &&\n      Number(\n        format5Dec(Number(marinadeState.staking_sol_cap), LAMPORTS_PER_SOL)\n      ) - Number(format5Dec(totalStaked, LAMPORTS_PER_SOL))\n\n    const maxSolBalance =\n      nativeSOLBalance &&\n      transactionFee &&\n      marinadeState.rent_exempt_for_token_acc &&\n      Math.max(\n        nativeSOLBalance -\n          transactionFee * 4 -\n          Number(marinadeState.rent_exempt_for_token_acc),\n        0\n      ) / LAMPORTS_PER_SOL\n\n    console.log('maxSolBalance: ', maxSolBalance)\n    console.log('extraAmountToKeep: ', extraAmountToKeep)\n    console.log('fillCap: ', fillCap)\n    console.log('Number(format5Dec(totalStaked, LAMPORTS_PER_SOL))')\n    console.log(Number(format5Dec(totalStaked, LAMPORTS_PER_SOL)))\n    console.log('stakingSolCap: ', stakingSolCap)\n\n    if (\n      maxSolBalance + Number(format5Dec(totalStaked, LAMPORTS_PER_SOL)) <\n      stakingSolCap\n    ) {\n      console.log('LESS')\n      return maxSolBalance - numLamportsToSol(extraAmountToKeep)\n    } else {\n      console.log('MORE')\n      return fillCap - numLamportsToSol(extraAmountToKeep)\n    }\n  }\n\n  const createLoan = useCallback(async () => {\n    if (!publicKey) {\n      notify('error', 'Wallet not connected!')\n      return\n    }\n\n    let signature: TransactionSignature = ''\n    try {\n      setLoading(true)\n      const owner = publicKey\n      const banana_mint_authority = await PublicKey.findProgramAddress(\n        [\n          PROGRAM_STATE_ACCOUNT.toBuffer(),\n          Buffer.from(BANANA_MINT_AUTHORITY_SEED),\n        ],\n        RAD_ID\n      )\n\n      const loan_account = new Keypair()\n\n      const bananaAtaAddress = await findAssociatedTokenAddress(\n        owner,\n        BANANA_MINT\n      )\n\n      const userMSolAtaAddress = await findAssociatedTokenAddress(\n        owner,\n        MSOL_MINT\n      )\n\n      const program_vault_derived_pubKey = await PublicKey.createWithSeed(\n        loan_account.publicKey,\n        PROGRAM_VAULT_SEED,\n        TOKEN_PROGRAM_ID\n      )\n\n      const programVaultAuthority = await PublicKey.findProgramAddress(\n        [\n          loan_account.publicKey.toBuffer(),\n          program_vault_derived_pubKey.toBuffer(),\n        ],\n        RAD_ID\n      )\n\n      const transaction = new Transaction()\n\n      const openLoanTransactionItems = [\n        // create loan account\n        SystemProgram.createAccount({\n          fromPubkey: owner,\n          newAccountPubkey: loan_account.publicKey,\n          lamports: await connection.getMinimumBalanceForRentExemption(\n            KONG_LOAN_ACCOUNT_SIZE\n          ),\n          space: KONG_LOAN_ACCOUNT_SIZE,\n          programId: RAD_ID,\n        }),\n        // CREATE PROGRAM VAULT\n        SystemProgram.createAccountWithSeed({\n          basePubkey: loan_account.publicKey,\n          fromPubkey: owner,\n          newAccountPubkey: program_vault_derived_pubKey,\n          seed: PROGRAM_VAULT_SEED,\n          lamports: await connection.getMinimumBalanceForRentExemption(\n            AccountLayout.span\n          ),\n          space: AccountLayout.span,\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        // initialize program vault as MSOL\n        Token.createInitAccountInstruction(\n          TOKEN_PROGRAM_ID,\n          MSOL_MINT,\n          program_vault_derived_pubKey,\n          programVaultAuthority[0]\n        ),\n      ]\n\n      // check if ataAccountExists\n      const ataAccountInfo = await connection.getAccountInfo(\n        bananaAtaAddress,\n        'finalized'\n      )\n\n      if (!ataAccountInfo) {\n        let dataLayoutATA = struct([u8('instruction')])\n        const ataData = Buffer.alloc(dataLayoutATA.span)\n        dataLayoutATA.encode(\n          {\n            instruction: 0,\n          },\n          ataData\n        )\n        openLoanTransactionItems.push(\n          new TransactionInstruction({\n            keys: [\n              { pubkey: owner, isSigner: false, isWritable: true },\n              { pubkey: bananaAtaAddress, isSigner: false, isWritable: true },\n              { pubkey: owner, isSigner: false, isWritable: false },\n              {\n                pubkey: BANANA_MINT,\n                isSigner: false,\n                isWritable: false,\n              },\n              { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\n              { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n              { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n            ],\n            programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n            data: ataData,\n          })\n        )\n      }\n\n      // check if userMSolAtaAddress exists\n      const userMSolAtaAccountInfo = await connection.getAccountInfo(\n        userMSolAtaAddress,\n        'finalized'\n      )\n\n      if (!userMSolAtaAccountInfo) {\n        let dataLayoutMSolATA = struct([u8('instruction')])\n        const mSolAtaData = Buffer.alloc(dataLayoutMSolATA.span)\n        dataLayoutMSolATA.encode(\n          {\n            instruction: 0,\n          },\n          mSolAtaData\n        )\n        openLoanTransactionItems.push(\n          new TransactionInstruction({\n            keys: [\n              { pubkey: owner, isSigner: false, isWritable: true },\n              { pubkey: userMSolAtaAddress, isSigner: false, isWritable: true },\n              { pubkey: owner, isSigner: false, isWritable: false },\n              {\n                pubkey: MSOL_MINT,\n                isSigner: false,\n                isWritable: false,\n              },\n              { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\n              { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n              { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n            ],\n            programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n            data: mSolAtaData,\n          })\n        )\n      }\n\n      let dataLayout = struct([u8('instruction'), nu64('lamports')])\n      const data = Buffer.alloc(dataLayout.span)\n      dataLayout.encode(\n        {\n          instruction: 0,\n          lamports: getCollateralAsNumber(collateral) * LAMPORTS_PER_SOL,\n        },\n        data\n      )\n      openLoanTransactionItems.push(\n        // send create loan instruction\n        new TransactionInstruction({\n          keys: [\n            {\n              pubkey: PROGRAM_STATE_ACCOUNT,\n              isSigner: false,\n              isWritable: false,\n            },\n            { pubkey: MARINADE_STATE_ID, isSigner: false, isWritable: true },\n            {\n              pubkey: loan_account.publicKey,\n              isSigner: false,\n              isWritable: true,\n            },\n            {\n              pubkey: program_vault_derived_pubKey,\n              isSigner: false,\n              isWritable: true,\n            },\n            { pubkey: BANANA_MINT, isSigner: false, isWritable: true },\n            {\n              pubkey: banana_mint_authority[0],\n              isSigner: false,\n              isWritable: false,\n            },\n            {\n              pubkey: bananaAtaAddress,\n              isSigner: false,\n              isWritable: true,\n            },\n            { pubkey: owner, isSigner: true, isWritable: true },\n            { pubkey: userMSolAtaAddress, isSigner: false, isWritable: true },\n            { pubkey: owner, isSigner: true, isWritable: true },\n            {\n              pubkey: SOL_ORACLE_PRODUCT,\n              isSigner: false,\n              isWritable: false,\n            },\n            { pubkey: SOL_ORACLE_PRICE, isSigner: false, isWritable: false },\n            { pubkey: MSOL_MINT, isSigner: false, isWritable: true },\n            { pubkey: SOL_LEG, isSigner: false, isWritable: true },\n            { pubkey: MSOL_LEG, isSigner: false, isWritable: true },\n            {\n              pubkey: MSOL_LEG_AUTHORITY_INFO,\n              isSigner: false,\n              isWritable: false,\n            },\n            { pubkey: RESERVE_PDA_INFO, isSigner: false, isWritable: true },\n            { pubkey: MSOL_MINT_AUTH, isSigner: false, isWritable: false },\n            { pubkey: SOLANA_TOKEN_ID, isSigner: false, isWritable: false },\n            { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n            {\n              pubkey: MARINADE_PROGRAM_ID,\n              isSigner: false,\n              isWritable: false,\n            },\n          ],\n          programId: RAD_ID,\n          data,\n        })\n      )\n\n      transaction.add(...openLoanTransactionItems)\n\n      const walletBalance = await connection.getBalance(publicKey)\n      const walletBalanceSOL = walletBalance / LAMPORTS_PER_SOL\n      if (walletBalanceSOL < getCollateralAsNumber(collateral)) {\n        throw Error(\n          `Insufficient wallet balance of ${walletBalanceSOL.toFixed(\n            5\n          )} SOL for transaction of ${collateral} SOL.`\n        )\n      }\n\n      // // Check Marinade\n      const stateAccount = await connection.getAccountInfo(MARINADE_STATE_ID)\n      const state: marinade.State = deserializeUnchecked(\n        marinade.MARINADE_BORSH_SCHEMA,\n        marinade.State,\n        stateAccount!.data.slice(8)\n      )\n\n      const totalStaked = state?.validator_system?.total_active_balance\n        ?.add(state?.stake_system.total_cooling_down)\n        ?.add(state?.available_reserve_balance)\n        // ?.sub(state?.circulating_ticket_balance)\n        ?.toNumber()\n\n      const transactionFee = (await connection.getRecentBlockhash())\n        .feeCalculator.lamportsPerSignature\n\n      if (\n        Number(collateral) + Number(format5Dec(totalStaked, LAMPORTS_PER_SOL)) >\n        Number(format5Dec(Number(state?.staking_sol_cap), LAMPORTS_PER_SOL))\n      ) {\n        const max = maxAmountToStake(\n          walletBalance,\n          totalStaked,\n          transactionFee,\n          state\n        )\n        setCollateral(max.toString())\n        notify(\n          'warning',\n          'Marinade Staking Pool is limiting loan collateral to: ' +\n            max.toString()\n        )\n        setLoading(false)\n        dispatch(setOpenLoanTransactionSignature(null))\n        return\n      }\n      // END Check\n\n      const signers: Signer[] = [loan_account]\n\n      notify('info', 'Open Loan Request Approval Needed')\n      signature = await sendTransaction(transaction, connection, {\n        signers: signers,\n      })\n      notify('info', 'Transaction sent:', signature)\n      dispatch(setOpenLoanTransactionSignature(signature))\n\n      await connection.confirmTransaction(signature, 'finalized')\n\n      notify('success', 'Transaction successful!', signature)\n      dispatch(setScanForNewLoans(true))\n      dispatch(setOpenLoanTransactionSignature(null))\n      handleClose()\n      setLoading(false)\n      setCollateral('')\n    } catch (error: any) {\n      if (error instanceof WalletSendTransactionError) {\n        notify('error', `Transaction failed! ${error?.message}`, signature)\n        setLoading(false)\n        dispatch(setOpenLoanTransactionSignature(null))\n        return\n      } else {\n        console.log(error)\n        notify('error', `Transaction failed! ${error?.message}`, signature)\n        setLoading(false)\n        dispatch(setOpenLoanTransactionSignature(null))\n        return\n      }\n    }\n  }, [\n    publicKey,\n    sendTransaction,\n    connection,\n    collateral,\n    dispatch,\n    notify,\n    handleClose,\n  ])\n\n  function setCollateralAmount(ev: React.ChangeEvent<HTMLInputElement>) {\n    if (validNumericTrailingCharCheck(ev.target.value)) {\n      setCollateral(validNumericTrailingCharCheck(ev.target.value))\n    } else if (ev.target.value === '') {\n      setCollateral('')\n    }\n  }\n\n  return (\n    <Modal\n      aria-labelledby=\"transition-modal-title\"\n      aria-describedby=\"transition-modal-description\"\n      open={open}\n      onClose={handleClose}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n        onClick: undefined,\n      }}\n    >\n      <Fade in={open}>\n        <Box\n          sx={{\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            width: 400,\n            border: '2px solid #000',\n            boxShadow: 24,\n            p: 4,\n          }}\n          className=\"Open-loan-modal\"\n        >\n          <Typography\n            id=\"modal-modal-title\"\n            variant=\"h6\"\n            component=\"h2\"\n            align={'center'}\n            color={'white'}\n          >\n            Open a New Loan\n          </Typography>\n          <br />\n          <CssTextField\n            variant=\"outlined\"\n            autoFocus={true}\n            fullWidth={true}\n            type={'text'}\n            label=\"Collateral Amount in SOL\"\n            id=\"collateral-amount\"\n            value={collateral}\n            onChange={setCollateralAmount.bind(this)}\n          />\n          <br />\n          <br />\n          <div\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              flexWrap: 'wrap',\n            }}\n          >\n            <ArrowDropDownCircleSharpIcon\n              style={{ marginLeft: '45%' }}\n              color=\"primary\"\n              fontSize=\"large\"\n            />\n          </div>\n          <br />\n          <LoanAmountEstimate collateral={collateral} />\n          <br />\n          <br />\n          <Box sx={{ flexGrow: 1 }}>\n            <Grid container spacing={2}>\n              <Grid item xs={10}>\n                <Typography\n                  id=\"modal-modal-title\"\n                  variant=\"caption\"\n                  component=\"h2\"\n                  align={'left'}\n                  color={'white'}\n                >\n                  Slippage Tolerance\n                  <Tooltip\n                    title=\"The maximum difference between your estimated price and execution price.\"\n                    placement=\"right\"\n                  >\n                    <HelpOutlineIcon\n                      style={{\n                        position: 'relative',\n                        marginLeft: '2px',\n                        top: '5px',\n                      }}\n                      fontSize=\"small\"\n                      color={'primary'}\n                    />\n                  </Tooltip>\n                </Typography>\n              </Grid>\n              <Grid item xs={2}>\n                <Typography\n                  id=\"modal-modal-title\"\n                  variant=\"caption\"\n                  component=\"h2\"\n                  align={'right'}\n                  color={'white'}\n                  style={{ position: 'relative', top: '5px' }}\n                >\n                  0.5%\n                </Typography>\n              </Grid>\n            </Grid>\n          </Box>\n          <br />\n          <br />\n          {loading ? (\n            <Box sx={{ flexGrow: 1 }}>\n              <Grid container spacing={2}>\n                <Grid item xs={7}>\n                  <CircularProgress color=\"success\" />\n                </Grid>\n                <Grid item xs={5}>\n                  {openLoanTransactionSignature && (\n                    <Link\n                      className={styles.link}\n                      href={`https://explorer.solana.com/tx/${openLoanTransactionSignature}?cluster=${WALLET_ADAPTER_NETWORK}`}\n                      target=\"_blank\"\n                      align=\"right\"\n                    >\n                      Transaction\n                      <LaunchIcon className={styles.icon} />\n                    </Link>\n                  )}\n                </Grid>\n              </Grid>\n            </Box>\n          ) : (\n            <>\n              <Button onClick={createLoan} variant={'contained'}>\n                Open Loan\n              </Button>\n              &nbsp;&nbsp;&nbsp;\n              <Button\n                onClick={handleClose}\n                variant={'contained'}\n                color={'warning'}\n              >\n                Cancel\n              </Button>\n            </>\n          )}\n        </Box>\n      </Fade>\n    </Modal>\n  )\n}\n"],"sourceRoot":""}